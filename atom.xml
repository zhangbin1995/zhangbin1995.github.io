<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeroBin&#39;s Blog</title>
  
  <subtitle>向阳而生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.herobin.top/"/>
  <updated>2019-01-11T05:40:10.000Z</updated>
  <id>http://www.herobin.top/</id>
  
  <author>
    <name>HeroBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>源码阅读-ArrayList</title>
    <link href="http://www.herobin.top/2019/01/10/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-ArrayList/"/>
    <id>http://www.herobin.top/2019/01/10/源码阅读-ArrayList/</id>
    <published>2019-01-10T06:00:42.000Z</published>
    <updated>2019-01-11T05:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ArrayList简介"><a href="#ArrayList简介" class="headerlink" title="ArrayList简介"></a>ArrayList简介</h3><p>ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。</p><p>它继承于 AbstractList，实现了 List, RandomAccess, Cloneable, java.io.Serializable 这些接口。</p><p>在我们学数据结构的时候就知道了线性表的顺序存储，插入删除元素的时间复杂度为O（n）,求表长以及增加元素，取第 i 元素的时间复杂度为O（1）</p><p>　 ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p><p>　　ArrayList 实现了RandomAccess 接口，即提供了随机访问功能。RandomAccess 是 Java 中用来被 List 实现，为 List 提供快速访问功能的。在 ArrayList 中，我们即可以通过元素的序号快速获取元素对象，这就是快速随机访问。</p><p>　　ArrayList 实现了Cloneable 接口，即覆盖了函数 clone()，能被克隆。</p><p>　　ArrayList 实现java.io.Serializable 接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p><p>　　和 Vector 不同，ArrayList 中的操作不是线程安全的！所以，建议在单线程中才使用 ArrayList，而在多线程中可以选择 Vector 或者 CopyOnWriteArrayList。</p><h3 id="ArrayList核心源码"><a href="#ArrayList核心源码" class="headerlink" title="ArrayList核心源码"></a>ArrayList核心源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br></pre></td><td class="code"><pre><span class="line">package java.util;</span><br><span class="line"></span><br><span class="line">import java.util.function.Consumer;</span><br><span class="line">import java.util.function.Predicate;</span><br><span class="line">import java.util.function.UnaryOperator;</span><br><span class="line"></span><br><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    private static final long serialVersionUID = 8683452581122892189L;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Default initial capacity.</span><br><span class="line">     * 默认初始容量大小</span><br><span class="line">     */</span><br><span class="line">    private static final int DEFAULT_CAPACITY = 10;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Shared empty array instance used for empty instances.</span><br><span class="line">     * 空数组（用于空实例）</span><br><span class="line">     */</span><br><span class="line">    private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用于默认大小空实例的共享空数组实例</span><br><span class="line">     * 我们把它从EMPTY_ELEMENTDATA数组中区分出来，以知道在添加第一个元素时容量需要增加多少</span><br><span class="line">     */</span><br><span class="line">    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存ArrayList数据的数组</span><br><span class="line">     */</span><br><span class="line">    transient Object[] elementData; // non-private to simplify nested class access</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ArrayList 所包含的元素个数</span><br><span class="line">     * @serial</span><br><span class="line">     */</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 带初始容量参数的构造函数。（用户自己指定容量）</span><br><span class="line">     */</span><br><span class="line">    public ArrayList(int initialCapacity) &#123;</span><br><span class="line">        if (initialCapacity &gt; 0) &#123;</span><br><span class="line">            this.elementData = new Object[initialCapacity];</span><br><span class="line">        &#125; else if (initialCapacity == 0) &#123;</span><br><span class="line">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructs an empty list with an initial capacity of ten.</span><br><span class="line">     * 默认构造函数， DEFAULTCAPACITY_EMPTY_ELEMENTDATA为0.初始值为10</span><br><span class="line">     * 也就是说初始其实是空数组，当添加一个元素的时候数组容量变为10</span><br><span class="line">     */</span><br><span class="line">    public ArrayList() &#123;</span><br><span class="line">        this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 构造一个包含指定集合的元素的列表</span><br><span class="line">     */</span><br><span class="line">    public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        if ((size = elementData.length) != 0) &#123;</span><br><span class="line">            // c.toArray might (incorrectly) not return Object[] (see 6260652)</span><br><span class="line">            if (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // replace with empty array.</span><br><span class="line">            this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 修改这个ArrayList实例的容量是列表的当前大小</span><br><span class="line">     * 可以使用此操作来最小化ArrayList实例的存储</span><br><span class="line">     */</span><br><span class="line">    public void trimToSize() &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        if (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == 0)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//下面是ArrayList的扩容机制</span><br><span class="line">//ArrayList的扩容机制提高了性能，如果每次只扩充一个</span><br><span class="line">//那么频繁的插入会导致频繁的拷贝，降低性能，而ArrayList的扩容机制避免了这种情况</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 如有必要，增加此ArrayList实例的容量，以确保它至少能容纳元素的数量</span><br><span class="line">     * @param minCatacity 所需的最小容量</span><br><span class="line">     */</span><br><span class="line">    public void ensureCapacity(int minCapacity) &#123;</span><br><span class="line">        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            // any size if not default element table</span><br><span class="line">            ? 0</span><br><span class="line">            // larger than default for default empty table. It&apos;s already</span><br><span class="line">            // supposed to be at default size.</span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        if (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//得到最小扩容量</span><br><span class="line">    private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//判断是否需要扩容</span><br><span class="line">    private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        // overflow-conscious code</span><br><span class="line">        if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">            //调用grow方法进行扩容，调用此方法代表已经开始扩容了</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 要分配的最大数组大小</span><br><span class="line">     */</span><br><span class="line">    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * ArrayList扩容的核心方法</span><br><span class="line">     * @param minCapacity the desired minimum capacity</span><br><span class="line">     */</span><br><span class="line">    private void grow(int minCapacity) &#123;</span><br><span class="line">        // oldCapacity为旧容量，newCapacity为新容量</span><br><span class="line">        int oldCapacity = elementData.length;</span><br><span class="line">        //将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span><br><span class="line">        //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍</span><br><span class="line">        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">        //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span><br><span class="line">        if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        //再检查新容量是否超出了ArrayList所定义的最大容量，</span><br><span class="line">        //若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span><br><span class="line">        //如果minCapacity大于最大容量，则新容量则为ArrayList定义的最大容量，否则，新容量大小则为 minCapacity。 </span><br><span class="line">        </span><br><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        // minCapacity is usually close to size, so this is a win:</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//比较minCapacity和MAX_ARRAY_SIZE</span><br><span class="line">    private static int hugeCapacity(int minCapacity) &#123;</span><br><span class="line">        if (minCapacity &lt; 0) // overflow</span><br><span class="line">            throw new OutOfMemoryError();</span><br><span class="line">        return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回此列表中的元素数</span><br><span class="line">     */</span><br><span class="line">    public int size() &#123;</span><br><span class="line">        return size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 如果此列表不包含元素，则返回 true</span><br><span class="line">     */</span><br><span class="line">    public boolean isEmpty() &#123;</span><br><span class="line">        return size == 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 如果此列表包含指定的元素，则返回 true</span><br><span class="line">     */</span><br><span class="line">    public boolean contains(Object o) &#123;</span><br><span class="line">        return indexOf(o) &gt;= 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回此列表中指定元素的首次出现的索引，如果此列表不包含此元素，则为-1</span><br><span class="line">     */</span><br><span class="line">    public int indexOf(Object o) &#123;</span><br><span class="line">        if (o == null) &#123;</span><br><span class="line">            for (int i = 0; i &lt; size; i++)</span><br><span class="line">                if (elementData[i]==null)</span><br><span class="line">                    return i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int i = 0; i &lt; size; i++)</span><br><span class="line">                if (o.equals(elementData[i]))</span><br><span class="line">                    return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1</span><br><span class="line">     */</span><br><span class="line">    public int lastIndexOf(Object o) &#123;</span><br><span class="line">        if (o == null) &#123;</span><br><span class="line">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">                if (elementData[i]==null)</span><br><span class="line">                    return i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int i = size-1; i &gt;= 0; i--)</span><br><span class="line">                if (o.equals(elementData[i]))</span><br><span class="line">                    return i;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回此ArrayList实例的拷贝</span><br><span class="line">     *</span><br><span class="line">     * @return a clone of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance</span><br><span class="line">     */</span><br><span class="line">    public Object clone() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = 0;</span><br><span class="line">            return v;</span><br><span class="line">        &#125; catch (CloneNotSupportedException e) &#123;</span><br><span class="line">            // this shouldn&apos;t happen, since we are Cloneable</span><br><span class="line">            throw new InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * List转数组</span><br><span class="line">     * 以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 </span><br><span class="line">     */</span><br><span class="line">    public Object[] toArray() &#123;</span><br><span class="line">        return Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 以正确的顺序返回一个包含此列表中所有元素的数组（从第一个到最后一个元素）; </span><br><span class="line">     * 返回的数组的运行时类型是指定数组的运行时类型。 如果列表适合指定的数组，则返回其中。 </span><br><span class="line">     * 否则，将为指定数组的运行时类型和此列表的大小分配一个新数组。 </span><br><span class="line">     * 如果列表适用于指定的数组，其余空间（即数组的列表数量多于此元素），则紧跟在集合结束后的数组中的元素设置为null 。</span><br><span class="line">     *（这仅在调用者知道列表不包含任何空元素的情况下才能确定列表的长度。）</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        if (a.length &lt; size)</span><br><span class="line">            // Make a new array of a&apos;s runtime type, but my contents:</span><br><span class="line">            return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, 0, a, 0, size);</span><br><span class="line">        if (a.length &gt; size)</span><br><span class="line">            a[size] = null;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Positional Access Operations</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    E elementData(int index) &#123;</span><br><span class="line">        return (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回此列表中指定位置的元素。</span><br><span class="line">     */</span><br><span class="line">    public E get(int index) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        return elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用指定的元素替换此列表中指定位置的元素。 </span><br><span class="line">     */</span><br><span class="line">    public E set(int index, E element) &#123;</span><br><span class="line">     //对index进行界限检查</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        //返回原来在这个位置的元素</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将特定的元素追加到此列表的末尾</span><br><span class="line">     */</span><br><span class="line">    public boolean add(E e) &#123;</span><br><span class="line">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">        //这里看到ArrayList添加元素的实质就相当于为数组赋值</span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在此列表中的指定位置插入指定的元素。 </span><br><span class="line">     * 先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；</span><br><span class="line">     * 再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span><br><span class="line">     */</span><br><span class="line">    public void add(int index, E element) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + 1,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除该列表中指定位置的元素。 将任何后续元素移动到左侧（从其索引中减去一个元素）。</span><br><span class="line">     */</span><br><span class="line">    public E remove(int index) &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        int numMoved = size - index - 1;</span><br><span class="line">        if (numMoved &gt; 0)</span><br><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = null; // clear to let GC do its work</span><br><span class="line"></span><br><span class="line">        //返回从列表中删除的元素</span><br><span class="line">        return oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从列表中删除指定元素的第一个出现位置的元素（如果存在）。 如果列表不包含该元素，则它不会更改。</span><br><span class="line">     */</span><br><span class="line">    public boolean remove(Object o) &#123;</span><br><span class="line">        if (o == null) &#123;</span><br><span class="line">            for (int index = 0; index &lt; size; index++)</span><br><span class="line">                if (elementData[index] == null) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (int index = 0; index &lt; size; index++)</span><br><span class="line">                if (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 快速删除，用的较少，用时再深究</span><br><span class="line">     */</span><br><span class="line">    private void fastRemove(int index) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        int numMoved = size - index - 1;</span><br><span class="line">        if (numMoved &gt; 0)</span><br><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = null; // clear to let GC do its work</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从列表中删除所有元素</span><br><span class="line">     */</span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        // 把数组中所有元素的值设为null（？不是释放 应该是后面用垃圾回收机制回收内存）</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            elementData[i] = null;</span><br><span class="line"></span><br><span class="line">        size = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 按指定集合的Iterator返回的顺序将指定集合中的所有元素追加到此列表的末尾。</span><br><span class="line">     */</span><br><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        int numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class="line">        System.arraycopy(a, 0, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        return numNew != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将指定集合中的所有元素插入到此列表中，从指定的位置开始。</span><br><span class="line">     */</span><br><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        int numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  // Increments modCount</span><br><span class="line"></span><br><span class="line">        int numMoved = size - index;</span><br><span class="line">        if (numMoved &gt; 0)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, 0, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        return numNew != 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从此列表中删除所有索引为fromIndex （含）和toIndex之间的元素。</span><br><span class="line">     * 将任何后续元素移动到左侧（减少其索引）。    </span><br><span class="line">     */</span><br><span class="line">    protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        int numMoved = size - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        // clear to let GC do its work</span><br><span class="line">        int newSize = size - (toIndex-fromIndex);</span><br><span class="line">        for (int i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = null;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检查给定的索引是否在范围内。</span><br><span class="line">     */</span><br><span class="line">    private void rangeCheck(int index) &#123;</span><br><span class="line">        if (index &gt;= size)</span><br><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * A version of rangeCheck used by add and addAll.</span><br><span class="line">     * add和addAll使用的rangeCheck的一个版本</span><br><span class="line">     */</span><br><span class="line">    private void rangeCheckForAdd(int index) &#123;</span><br><span class="line">        if (index &gt; size || index &lt; 0)</span><br><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回IndexOutOfBoundsException细节信息</span><br><span class="line">     */</span><br><span class="line">    private String outOfBoundsMsg(int index) &#123;</span><br><span class="line">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从此列表中删除指定集合中包含的所有元素。 </span><br><span class="line">     */</span><br><span class="line">    public boolean removeAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        return batchRemove(c, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 仅保留此列表中包含在指定集合中的元素。 （取交集）</span><br><span class="line">     * 即 从此列表中删除其中不包含在指定集合中的所有元素。</span><br><span class="line">     * @see Collection#contains(Object)</span><br><span class="line">     */</span><br><span class="line">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        return batchRemove(c, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span><br><span class="line">        final Object[] elementData = this.elementData;</span><br><span class="line">        int r = 0, w = 0;</span><br><span class="line">        boolean modified = false;</span><br><span class="line">        try &#123;</span><br><span class="line">            for (; r &lt; size; r++)</span><br><span class="line">                if (c.contains(elementData[r]) == complement)</span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // Preserve behavioral compatibility with AbstractCollection,</span><br><span class="line">            // even if c.contains() throws.</span><br><span class="line">            if (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            if (w != size) &#123;</span><br><span class="line">                // clear to let GC do its work</span><br><span class="line">                for (int i = w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = null;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span><br><span class="line">     * is, serialize it).</span><br><span class="line">     *</span><br><span class="line">     * @serialData The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span><br><span class="line">     *             instance is emitted (int), followed by all of its elements</span><br><span class="line">     *             (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span><br><span class="line">     */</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream s)</span><br><span class="line">        throws java.io.IOException&#123;</span><br><span class="line">        // Write out element count, and any hidden stuff</span><br><span class="line">        int expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        // Write out size as capacity for behavioural compatibility with clone()</span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        // Write out all elements in the proper order.</span><br><span class="line">        for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (modCount != expectedModCount) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span><br><span class="line">     * deserialize it).</span><br><span class="line">     */</span><br><span class="line">    private void readObject(java.io.ObjectInputStream s)</span><br><span class="line">        throws java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">        // Read in size, and any hidden stuff</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        // Read in capacity</span><br><span class="line">        s.readInt(); // ignored</span><br><span class="line"></span><br><span class="line">        if (size &gt; 0) &#123;</span><br><span class="line">            // be like clone(), allocate array based upon size not capacity</span><br><span class="line">            ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">            Object[] a = elementData;</span><br><span class="line">            // Read in all elements in the proper order.</span><br><span class="line">            for (int i=0; i&lt;size; i++) &#123;</span><br><span class="line">                a[i] = s.readObject();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从列表中的指定位置开始，返回列表中的元素（按正确顺序）的列表迭代器。</span><br><span class="line">     */</span><br><span class="line">    public ListIterator&lt;E&gt; listIterator(int index) &#123;</span><br><span class="line">        if (index &lt; 0 || index &gt; size)</span><br><span class="line">            throw new IndexOutOfBoundsException(&quot;Index: &quot;+index);</span><br><span class="line">        return new ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回列表中的列表迭代器（按适当的顺序）。 </span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;The returned list iterator is &lt;a href=&quot;#fail-fast&quot;&gt;&lt;i&gt;fail-fast&lt;/i&gt;&lt;/a&gt;.</span><br><span class="line">     *</span><br><span class="line">     * @see #listIterator(int)</span><br><span class="line">     */</span><br><span class="line">    public ListIterator&lt;E&gt; listIterator() &#123;</span><br><span class="line">        return new ListItr(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 以正确的顺序返回该列表中的元素的迭代器。 </span><br><span class="line">     *</span><br><span class="line">     */</span><br><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">        return new Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * An optimized version of AbstractList.Itr</span><br><span class="line">     */</span><br><span class="line">    private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="line">        int cursor;       // index of next element to return</span><br><span class="line">        int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class="line">        int expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public E next() &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            int i = cursor;</span><br><span class="line">            if (i &gt;= size)</span><br><span class="line">                throw new NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">            if (i &gt;= elementData.length)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            cursor = i + 1;</span><br><span class="line">            return (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void remove() &#123;</span><br><span class="line">            if (lastRet &lt; 0)</span><br><span class="line">                throw new IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                ArrayList.this.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -1;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            final int size = ArrayList.this.size;</span><br><span class="line">            int i = cursor;</span><br><span class="line">            if (i &gt;= size) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            final Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">            if (i &gt;= elementData.length) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            // update once at end of iteration to reduce heap write traffic</span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - 1;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        final void checkForComodification() &#123;</span><br><span class="line">            if (modCount != expectedModCount)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * An optimized version of AbstractList.ListItr</span><br><span class="line">     */</span><br><span class="line">    private class ListItr extends Itr implements ListIterator&lt;E&gt; &#123;</span><br><span class="line">        ListItr(int index) &#123;</span><br><span class="line">            super();</span><br><span class="line">            cursor = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean hasPrevious() &#123;</span><br><span class="line">            return cursor != 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int nextIndex() &#123;</span><br><span class="line">            return cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int previousIndex() &#123;</span><br><span class="line">            return cursor - 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        public E previous() &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            int i = cursor - 1;</span><br><span class="line">            if (i &lt; 0)</span><br><span class="line">                throw new NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">            if (i &gt;= elementData.length)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            cursor = i;</span><br><span class="line">            return (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void set(E e) &#123;</span><br><span class="line">            if (lastRet &lt; 0)</span><br><span class="line">                throw new IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                ArrayList.this.set(lastRet, e);</span><br><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void add(E e) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                int i = cursor;</span><br><span class="line">                ArrayList.this.add(i, e);</span><br><span class="line">                cursor = i + 1;</span><br><span class="line">                lastRet = -1;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Returns a view of the portion of this list between the specified</span><br><span class="line">     * &#123;@code fromIndex&#125;, inclusive, and &#123;@code toIndex&#125;, exclusive.  (If</span><br><span class="line">     * &#123;@code fromIndex&#125; and &#123;@code toIndex&#125; are equal, the returned list is</span><br><span class="line">     * empty.)  The returned list is backed by this list, so non-structural</span><br><span class="line">     * changes in the returned list are reflected in this list, and vice-versa.</span><br><span class="line">     * The returned list supports all of the optional list operations.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;This method eliminates the need for explicit range operations (of</span><br><span class="line">     * the sort that commonly exist for arrays).  Any operation that expects</span><br><span class="line">     * a list can be used as a range operation by passing a subList view</span><br><span class="line">     * instead of a whole list.  For example, the following idiom</span><br><span class="line">     * removes a range of elements from a list:</span><br><span class="line">     * &lt;pre&gt;</span><br><span class="line">     *      list.subList(from, to).clear();</span><br><span class="line">     * &lt;/pre&gt;</span><br><span class="line">     * Similar idioms may be constructed for &#123;@link #indexOf(Object)&#125; and</span><br><span class="line">     * &#123;@link #lastIndexOf(Object)&#125;, and all of the algorithms in the</span><br><span class="line">     * &#123;@link Collections&#125; class can be applied to a subList.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;The semantics of the list returned by this method become undefined if</span><br><span class="line">     * the backing list (i.e., this list) is &lt;i&gt;structurally modified&lt;/i&gt; in</span><br><span class="line">     * any way other than via the returned list.  (Structural modifications are</span><br><span class="line">     * those that change the size of this list, or otherwise perturb it in such</span><br><span class="line">     * a fashion that iterations in progress may yield incorrect results.)</span><br><span class="line">     *</span><br><span class="line">     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line">     * @throws IllegalArgumentException &#123;@inheritDoc&#125;</span><br><span class="line">     */</span><br><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        return new SubList(this, 0, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void subListRangeCheck(int fromIndex, int toIndex, int size) &#123;</span><br><span class="line">        if (fromIndex &lt; 0)</span><br><span class="line">            throw new IndexOutOfBoundsException(&quot;fromIndex = &quot; + fromIndex);</span><br><span class="line">        if (toIndex &gt; size)</span><br><span class="line">            throw new IndexOutOfBoundsException(&quot;toIndex = &quot; + toIndex);</span><br><span class="line">        if (fromIndex &gt; toIndex)</span><br><span class="line">            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span><br><span class="line">                                               &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class SubList extends AbstractList&lt;E&gt; implements RandomAccess &#123;</span><br><span class="line">        private final AbstractList&lt;E&gt; parent;</span><br><span class="line">        private final int parentOffset;</span><br><span class="line">        private final int offset;</span><br><span class="line">        int size;</span><br><span class="line"></span><br><span class="line">        SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">                int offset, int fromIndex, int toIndex) &#123;</span><br><span class="line">            this.parent = parent;</span><br><span class="line">            this.parentOffset = fromIndex;</span><br><span class="line">            this.offset = offset + fromIndex;</span><br><span class="line">            this.size = toIndex - fromIndex;</span><br><span class="line">            this.modCount = ArrayList.this.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public E set(int index, E e) &#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E oldValue = ArrayList.this.elementData(offset + index);</span><br><span class="line">            ArrayList.this.elementData[offset + index] = e;</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public E get(int index) &#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            return ArrayList.this.elementData(offset + index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int size() &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            return this.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void add(int index, E e) &#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.add(parentOffset + index, e);</span><br><span class="line">            this.modCount = parent.modCount;</span><br><span class="line">            this.size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public E remove(int index) &#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            E result = parent.remove(parentOffset + index);</span><br><span class="line">            this.modCount = parent.modCount;</span><br><span class="line">            this.size--;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected void removeRange(int fromIndex, int toIndex) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                               parentOffset + toIndex);</span><br><span class="line">            this.modCount = parent.modCount;</span><br><span class="line">            this.size -= toIndex - fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">            return addAll(this.size, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            int cSize = c.size();</span><br><span class="line">            if (cSize==0)</span><br><span class="line">                return false;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            this.modCount = parent.modCount;</span><br><span class="line">            this.size += cSize;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Iterator&lt;E&gt; iterator() &#123;</span><br><span class="line">            return listIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ListIterator&lt;E&gt; listIterator(final int index) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            final int offset = this.offset;</span><br><span class="line"></span><br><span class="line">            return new ListIterator&lt;E&gt;() &#123;</span><br><span class="line">                int cursor = index;</span><br><span class="line">                int lastRet = -1;</span><br><span class="line">                int expectedModCount = ArrayList.this.modCount;</span><br><span class="line"></span><br><span class="line">                public boolean hasNext() &#123;</span><br><span class="line">                    return cursor != SubList.this.size;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                public E next() &#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    int i = cursor;</span><br><span class="line">                    if (i &gt;= SubList.this.size)</span><br><span class="line">                        throw new NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">                    if (offset + i &gt;= elementData.length)</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                    cursor = i + 1;</span><br><span class="line">                    return (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public boolean hasPrevious() &#123;</span><br><span class="line">                    return cursor != 0;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                public E previous() &#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    int i = cursor - 1;</span><br><span class="line">                    if (i &lt; 0)</span><br><span class="line">                        throw new NoSuchElementException();</span><br><span class="line">                    Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">                    if (offset + i &gt;= elementData.length)</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                    cursor = i;</span><br><span class="line">                    return (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">                public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="line">                    Objects.requireNonNull(consumer);</span><br><span class="line">                    final int size = SubList.this.size;</span><br><span class="line">                    int i = cursor;</span><br><span class="line">                    if (i &gt;= size) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    final Object[] elementData = ArrayList.this.elementData;</span><br><span class="line">                    if (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                    while (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                        consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    // update once at end of iteration to reduce heap write traffic</span><br><span class="line">                    lastRet = cursor = i;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public int nextIndex() &#123;</span><br><span class="line">                    return cursor;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public int previousIndex() &#123;</span><br><span class="line">                    return cursor - 1;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public void remove() &#123;</span><br><span class="line">                    if (lastRet &lt; 0)</span><br><span class="line">                        throw new IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        SubList.this.remove(lastRet);</span><br><span class="line">                        cursor = lastRet;</span><br><span class="line">                        lastRet = -1;</span><br><span class="line">                        expectedModCount = ArrayList.this.modCount;</span><br><span class="line">                    &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public void set(E e) &#123;</span><br><span class="line">                    if (lastRet &lt; 0)</span><br><span class="line">                        throw new IllegalStateException();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        ArrayList.this.set(offset + lastRet, e);</span><br><span class="line">                    &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public void add(E e) &#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    try &#123;</span><br><span class="line">                        int i = cursor;</span><br><span class="line">                        SubList.this.add(i, e);</span><br><span class="line">                        cursor = i + 1;</span><br><span class="line">                        lastRet = -1;</span><br><span class="line">                        expectedModCount = ArrayList.this.modCount;</span><br><span class="line">                    &#125; catch (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                final void checkForComodification() &#123;</span><br><span class="line">                    if (expectedModCount != ArrayList.this.modCount)</span><br><span class="line">                        throw new ConcurrentModificationException();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span><br><span class="line">            subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">            return new SubList(this, offset, fromIndex, toIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void rangeCheck(int index) &#123;</span><br><span class="line">            if (index &lt; 0 || index &gt;= this.size)</span><br><span class="line">                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void rangeCheckForAdd(int index) &#123;</span><br><span class="line">            if (index &lt; 0 || index &gt; this.size)</span><br><span class="line">                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private String outOfBoundsMsg(int index) &#123;</span><br><span class="line">            return &quot;Index: &quot;+index+&quot;, Size: &quot;+this.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void checkForComodification() &#123;</span><br><span class="line">            if (ArrayList.this.modCount != this.modCount)</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            return new ArrayListSpliterator&lt;E&gt;(ArrayList.this, offset,</span><br><span class="line">                                               offset + this.size, this.modCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void forEach(Consumer&lt;? super E&gt; action) &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        final int expectedModCount = modCount;</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        final E[] elementData = (E[]) this.elementData;</span><br><span class="line">        final int size = this.size;</span><br><span class="line">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            action.accept(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        if (modCount != expectedModCount) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Creates a &lt;em&gt;&lt;a href=&quot;Spliterator.html#binding&quot;&gt;late-binding&lt;/a&gt;&lt;/em&gt;</span><br><span class="line">     * and &lt;em&gt;fail-fast&lt;/em&gt; &#123;@link Spliterator&#125; over the elements in this</span><br><span class="line">     * list.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;The &#123;@code Spliterator&#125; reports &#123;@link Spliterator#SIZED&#125;,</span><br><span class="line">     * &#123;@link Spliterator#SUBSIZED&#125;, and &#123;@link Spliterator#ORDERED&#125;.</span><br><span class="line">     * Overriding implementations should document the reporting of additional</span><br><span class="line">     * characteristic values.</span><br><span class="line">     *</span><br><span class="line">     * @return a &#123;@code Spliterator&#125; over the elements in this list</span><br><span class="line">     * @since 1.8</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public Spliterator&lt;E&gt; spliterator() &#123;</span><br><span class="line">        return new ArrayListSpliterator&lt;&gt;(this, 0, -1, 0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Index-based split-by-two, lazily initialized Spliterator */</span><br><span class="line">    static final class ArrayListSpliterator&lt;E&gt; implements Spliterator&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">        private final ArrayList&lt;E&gt; list;</span><br><span class="line">        private int index; // current index, modified on advance/split</span><br><span class="line">        private int fence; // -1 until used; then one past last index</span><br><span class="line">        private int expectedModCount; // initialized when fence set</span><br><span class="line"></span><br><span class="line">        /** Create new spliterator covering the given  range */</span><br><span class="line">        ArrayListSpliterator(ArrayList&lt;E&gt; list, int origin, int fence,</span><br><span class="line">                             int expectedModCount) &#123;</span><br><span class="line">            this.list = list; // OK if null unless traversed</span><br><span class="line">            this.index = origin;</span><br><span class="line">            this.fence = fence;</span><br><span class="line">            this.expectedModCount = expectedModCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private int getFence() &#123; // initialize fence to size on first use</span><br><span class="line">            int hi; // (a specialized variant appears in method forEach)</span><br><span class="line">            ArrayList&lt;E&gt; lst;</span><br><span class="line">            if ((hi = fence) &lt; 0) &#123;</span><br><span class="line">                if ((lst = list) == null)</span><br><span class="line">                    hi = fence = 0;</span><br><span class="line">                else &#123;</span><br><span class="line">                    expectedModCount = lst.modCount;</span><br><span class="line">                    hi = fence = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return hi;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ArrayListSpliterator&lt;E&gt; trySplit() &#123;</span><br><span class="line">            int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1;</span><br><span class="line">            return (lo &gt;= mid) ? null : // divide range in half unless too small</span><br><span class="line">                new ArrayListSpliterator&lt;E&gt;(list, lo, index = mid,</span><br><span class="line">                                            expectedModCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public boolean tryAdvance(Consumer&lt;? super E&gt; action) &#123;</span><br><span class="line">            if (action == null)</span><br><span class="line">                throw new NullPointerException();</span><br><span class="line">            int hi = getFence(), i = index;</span><br><span class="line">            if (i &lt; hi) &#123;</span><br><span class="line">                index = i + 1;</span><br><span class="line">                @SuppressWarnings(&quot;unchecked&quot;) E e = (E)list.elementData[i];</span><br><span class="line">                action.accept(e);</span><br><span class="line">                if (list.modCount != expectedModCount)</span><br><span class="line">                    throw new ConcurrentModificationException();</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void forEachRemaining(Consumer&lt;? super E&gt; action) &#123;</span><br><span class="line">            int i, hi, mc; // hoist accesses and checks from loop</span><br><span class="line">            ArrayList&lt;E&gt; lst; Object[] a;</span><br><span class="line">            if (action == null)</span><br><span class="line">                throw new NullPointerException();</span><br><span class="line">            if ((lst = list) != null &amp;&amp; (a = lst.elementData) != null) &#123;</span><br><span class="line">                if ((hi = fence) &lt; 0) &#123;</span><br><span class="line">                    mc = lst.modCount;</span><br><span class="line">                    hi = lst.size;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                    mc = expectedModCount;</span><br><span class="line">                if ((i = index) &gt;= 0 &amp;&amp; (index = hi) &lt;= a.length) &#123;</span><br><span class="line">                    for (; i &lt; hi; ++i) &#123;</span><br><span class="line">                        @SuppressWarnings(&quot;unchecked&quot;) E e = (E) a[i];</span><br><span class="line">                        action.accept(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (lst.modCount == mc)</span><br><span class="line">                        return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public long estimateSize() &#123;</span><br><span class="line">            return (long) (getFence() - index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int characteristics() &#123;</span><br><span class="line">            return Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean removeIf(Predicate&lt;? super E&gt; filter) &#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        // figure out which elements are to be removed</span><br><span class="line">        // any exception thrown from the filter predicate at this stage</span><br><span class="line">        // will leave the collection unmodified</span><br><span class="line">        int removeCount = 0;</span><br><span class="line">        final BitSet removeSet = new BitSet(size);</span><br><span class="line">        final int expectedModCount = modCount;</span><br><span class="line">        final int size = this.size;</span><br><span class="line">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">            final E element = (E) elementData[i];</span><br><span class="line">            if (filter.test(element)) &#123;</span><br><span class="line">                removeSet.set(i);</span><br><span class="line">                removeCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (modCount != expectedModCount) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // shift surviving elements left over the spaces left by removed elements</span><br><span class="line">        final boolean anyToRemove = removeCount &gt; 0;</span><br><span class="line">        if (anyToRemove) &#123;</span><br><span class="line">            final int newSize = size - removeCount;</span><br><span class="line">            for (int i=0, j=0; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">                i = removeSet.nextClearBit(i);</span><br><span class="line">                elementData[j] = elementData[i];</span><br><span class="line">            &#125;</span><br><span class="line">            for (int k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">                elementData[k] = null;  // Let gc do its work</span><br><span class="line">            &#125;</span><br><span class="line">            this.size = newSize;</span><br><span class="line">            if (modCount != expectedModCount) &#123;</span><br><span class="line">                throw new ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            modCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return anyToRemove;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void replaceAll(UnaryOperator&lt;E&gt; operator) &#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        final int expectedModCount = modCount;</span><br><span class="line">        final int size = this.size;</span><br><span class="line">        for (int i=0; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        if (modCount != expectedModCount) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    public void sort(Comparator&lt;? super E&gt; c) &#123;</span><br><span class="line">        final int expectedModCount = modCount;</span><br><span class="line">        Arrays.sort((E[]) elementData, 0, size, c);</span><br><span class="line">        if (modCount != expectedModCount) &#123;</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码重点方法分析"><a href="#源码重点方法分析" class="headerlink" title="源码重点方法分析"></a>源码重点方法分析</h3><h4 id="System-arraycopy-和Arrays-copyOf-方法"><a href="#System-arraycopy-和Arrays-copyOf-方法" class="headerlink" title="System.arraycopy()和Arrays.copyOf()方法"></a>System.arraycopy()和Arrays.copyOf()方法</h4><p>在ArrayList的源码中我们发现这两个数组复制的方法都被使用到了。如在add中用到了arraycopy()方法实现让数组从index+1的位置开始复制原数组从index开始到最后的元素再在index位置插入新元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 在此列表中的指定位置插入指定的元素。 </span><br><span class="line"> *先调用 rangeCheckForAdd 对index进行界限检查；然后调用 ensureCapacityInternal 方法保证capacity足够大；</span><br><span class="line"> *再将从index开始之后的所有成员后移一个位置；将element插入index位置；最后size加1。</span><br><span class="line"> */</span><br><span class="line">public void add(int index, E element) &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line">    //arraycopy()方法实现数组自己复制自己</span><br><span class="line">    //elementData:源数组;index:源数组中的起始位置;elementData：目标数组；index + 1：目标数组中的起始位置； size - index：要复制的数组元素的数量；</span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + 1, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在toArray()方法中用到了copyOf()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    *以正确的顺序（从第一个到最后一个元素）返回一个包含此列表中所有元素的数组。 </span><br><span class="line">    *返回的数组将是“安全的”，因为该列表不保留对它的引用。 （换句话说，这个方法必须分配一个新的数组）。</span><br><span class="line">    *因此，调用者可以自由地修改返回的数组。 此方法充当基于阵列和基于集合的API之间的桥梁。</span><br><span class="line">    */</span><br><span class="line">   public Object[] toArray() &#123;</span><br><span class="line">   //elementData：要复制的数组；size：要复制的长度</span><br><span class="line">       return Arrays.copyOf(elementData, size);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>联系:</strong> 看两者源代码可以发现<code>copyOf()</code>内部调用了<code>System.arraycopy()</code>方法。<br><strong>区别:</strong><br>1.arraycopy()需要目标数组，将原数组拷贝到你自己定义的数组里，而且可以选择拷贝的起点和长度以及放入新数组中的位置<br>2.copyOf()是系统自动在内部新建一个数组，并返回该数组。</p><h4 id="ArrayList核心扩容技术"><a href="#ArrayList核心扩容技术" class="headerlink" title="ArrayList核心扩容技术"></a>ArrayList核心扩容技术</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">//下面是ArrayList的扩容机制</span><br><span class="line">//ArrayList的扩容机制提高了性能，如果每次只扩充一个，</span><br><span class="line">//那么频繁的插入会导致频繁的拷贝，降低性能，而ArrayList的扩容机制避免了这种情况。</span><br><span class="line">    /**</span><br><span class="line">     * 如有必要，增加此ArrayList实例的容量，以确保它至少能容纳元素的数量</span><br><span class="line">     * @param   minCapacity   所需的最小容量</span><br><span class="line">     */</span><br><span class="line">    public void ensureCapacity(int minCapacity) &#123;</span><br><span class="line">        int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            // any size if not default element table</span><br><span class="line">            ? 0</span><br><span class="line">            // larger than default for default empty table. It&apos;s already</span><br><span class="line">            // supposed to be at default size.</span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">        if (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   //得到最小扩容量</span><br><span class="line">    private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">              // 获取默认的容量和传入参数的较大值</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">  //判断是否需要扩容,上面两个方法都要调用</span><br><span class="line">    private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        // 如果说minCapacity也就是所需的最小容量大于保存ArrayList数据的数组的长度的话，就需要调用grow(minCapacity)方法扩容。</span><br><span class="line">        //这个minCapacity到底为多少呢？举个例子在添加元素(add)方法中这个minCapacity的大小就为现在数组的长度加1</span><br><span class="line">        if (minCapacity - elementData.length &gt; 0)</span><br><span class="line">            //调用grow方法进行扩容，调用此方法代表已经开始扩容了</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * ArrayList扩容的核心方法。</span><br><span class="line"> */</span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">   //elementData为保存ArrayList数据的数组</span><br><span class="line">   ///elementData.length求数组长度elementData.size是求数组中的元素个数</span><br><span class="line">    // oldCapacity为旧容量，newCapacity为新容量</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    //将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span><br><span class="line">    //我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    //然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    //再检查新容量是否超出了ArrayList所定义的最大容量，</span><br><span class="line">    //若超出了，则调用hugeCapacity()来比较minCapacity和 MAX_ARRAY_SIZE，</span><br><span class="line">    //如果minCapacity大于最大容量，则新容量则为ArrayList定义的最大容量，否则，新容量大小则为 minCapacity。 </span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    // minCapacity is usually close to size, so this is a win:</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩容机制代码中的已经做了详细的注释解释。<br>另外值得注意的是大家很容易忽略的一个运算符：<strong>移位运算符</strong> 　　<br><strong>简介</strong>：移位运算符就是在二进制的基础上对数字进行平移。按照平移的方向和填充数字的规则分为三种:&lt;&lt;(左移)、&gt;&gt;(带符号右移)和&gt;&gt;&gt;(无符号右移)。 　　<br><strong>作用</strong>：对于大数据的2进制运算,位移运算符比那些普通运算符的运算要快很多,因为程序仅仅移动一下而已,不去计算,这样提高了效率,节省了资源 　　比如这里：<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>; 右移一位相当于除2，右移n位相当于除以 2 的 n 次方。这里 oldCapacity 明显右移了1位所以相当于oldCapacity /2。</p><p>另外需要注意的是：</p><blockquote><ul><li>java 中的length 属性是针对数组说的,比如说你声明了一个数组,想知道这个数组的长度则用到了 length 这个属性.</li></ul></blockquote><blockquote><ul><li>java 中的length()方法是针对字 符串String说的,如果想看这个字符串的长度则用到 length()这个方法.</li></ul></blockquote><blockquote><ul><li>java 中的size()方法是针对泛型集合说的,如果想看这个泛型有多少个元素,就调用此方法来查看!</li></ul></blockquote><h3 id="ArrayList经典Demo"><a href="#ArrayList经典Demo" class="headerlink" title="ArrayList经典Demo"></a>ArrayList经典Demo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package list;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class ArrayListDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] srgs)&#123;</span><br><span class="line">         ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">         System.out.printf(&quot;Before add:arrayList.size() = %d\n&quot;,arrayList.size());</span><br><span class="line"></span><br><span class="line">         arrayList.add(1);</span><br><span class="line">         arrayList.add(3);</span><br><span class="line">         arrayList.add(5);</span><br><span class="line">         arrayList.add(7);</span><br><span class="line">         arrayList.add(9);</span><br><span class="line">         System.out.printf(&quot;After add:arrayList.size() = %d\n&quot;,arrayList.size());</span><br><span class="line"></span><br><span class="line">         System.out.println(&quot;Printing elements of arrayList&quot;);</span><br><span class="line">         // 三种遍历方式打印元素</span><br><span class="line">         // 第一种：通过迭代器遍历</span><br><span class="line">         System.out.print(&quot;通过迭代器遍历:&quot;);</span><br><span class="line">         Iterator&lt;Integer&gt; it = arrayList.iterator();</span><br><span class="line">         while(it.hasNext())&#123;</span><br><span class="line">             System.out.print(it.next() + &quot; &quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         // 第二种：通过索引值遍历</span><br><span class="line">         System.out.print(&quot;通过索引值遍历:&quot;);</span><br><span class="line">         for(int i = 0; i &lt; arrayList.size(); i++)&#123;</span><br><span class="line">             System.out.print(arrayList.get(i) + &quot; &quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         // 第三种：for循环遍历</span><br><span class="line">         System.out.print(&quot;for循环遍历:&quot;);</span><br><span class="line">         for(Integer number : arrayList)&#123;</span><br><span class="line">             System.out.print(number + &quot; &quot;);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // toArray用法</span><br><span class="line">         // 第一种方式(最常用)</span><br><span class="line">         Integer[] integer = arrayList.toArray(new Integer[0]);</span><br><span class="line"></span><br><span class="line">         // 第二种方式(容易理解)</span><br><span class="line">         Integer[] integer1 = new Integer[arrayList.size()];</span><br><span class="line">         arrayList.toArray(integer1);</span><br><span class="line"></span><br><span class="line">         // 抛出异常，java不支持向下转型</span><br><span class="line">         //Integer[] integer2 = new Integer[arrayList.size()];</span><br><span class="line">         //integer2 = arrayList.toArray();</span><br><span class="line">         System.out.println();</span><br><span class="line"></span><br><span class="line">         // 在指定位置添加元素</span><br><span class="line">         arrayList.add(2,2);</span><br><span class="line">         // 删除指定位置上的元素</span><br><span class="line">         arrayList.remove(2);    </span><br><span class="line">         // 删除指定元素</span><br><span class="line">         arrayList.remove((Object)3);</span><br><span class="line">         // 判断arrayList是否包含5</span><br><span class="line">         System.out.println(&quot;ArrayList contains 5 is: &quot; + arrayList.contains(5));</span><br><span class="line"></span><br><span class="line">         // 清空ArrayList</span><br><span class="line">         arrayList.clear();</span><br><span class="line">         // 判断ArrayList是否为空</span><br><span class="line">         System.out.println(&quot;ArrayList is empty: &quot; + arrayList.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ArrayList简介&quot;&gt;&lt;a href=&quot;#ArrayList简介&quot; class=&quot;headerlink&quot; title=&quot;ArrayList简介&quot;&gt;&lt;/a&gt;ArrayList简介&lt;/h3&gt;&lt;p&gt;ArrayList 的底层是数组队列，相当于动态数组。与 Java 
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="源码" scheme="http://www.herobin.top/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>this is incompatible with sql_mode=only_full_group_by问题解决</title>
    <link href="http://www.herobin.top/2019/01/02/this-is-incompatible-with-sql-mode-only-full-group-by%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.herobin.top/2019/01/02/this-is-incompatible-with-sql-mode-only-full-group-by问题解决/</id>
    <published>2019-01-02T10:34:24.000Z</published>
    <updated>2019-01-11T05:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>在编写好xml代码在测试类中测试时报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure><p>看一下<code>ONLY_FULL_GROUP_BY</code>的意思是：对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中，也就是说查出来的列必须在group by后面出现否则就会报错，或者这个字段出现在聚合函数里面。</p><p>进入到mysql中查看mysql版本 <code>select version();</code><br>查看sql_model参数命令：<code>SELECT @@GLOBAL.sql_mode;</code><br>                           <code>SELECT @@SESSION.sql_mode;</code><br>可以看到当前sql_mode。</p><p><img src="/uploads/mysql190102/1.png" alt=""></p><p>这里是我改过了的，所以已经没有ONLY_FULL_GROUP_BY了。<br>而我们的解决办法也是去掉这里的ONLY_FULL_GROUP_BY。</p><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set @@GLOBAL.sql_mode=&apos;&apos;;</span><br><span class="line">set sql_mode =&apos;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&apos;;</span><br></pre></td></tr></table></figure></p><p>默认关掉ONLY_FULL_GROUP_BY！</p><p>这个时候 在用工具select 一下<br><code>SELECT @@sql_mode;</code><br><code>SELECT @@GLOBAL.sql_mode;</code></p><p>发现已经不存在ONLY_FULL_GROUP_BY,代码运行正常。<br>但是如果你重启Mysql服务的话，发现ONLY_FULL_GROUP_BY还是会存在的。</p><h3 id="方法二：（推荐）"><a href="#方法二：（推荐）" class="headerlink" title="方法二：（推荐）"></a>方法二：（推荐）</h3><p>想要彻底解决这个问题还是要去配置文件my.cnf中修改，加入下图内容，保存，重启mysql。</p><p><img src="/uploads/mysql190102/2.png" alt=""></p><p>注意这里开始的时候重启有报错，原因是因为mysql8.0以上已经取消了<br><code>NO_AUTO_CREATE_USER</code>这个关键字，删掉sql语句中的这个关键字即可。</p><p><img src="/uploads/mysql190102/3.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysqld stop</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure><p>问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在编写好xml代码在测试类中测试时报错&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td 
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目的打包与部署</title>
    <link href="http://www.herobin.top/2018/12/28/SpringBoot%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%89%93%E5%8C%85%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.herobin.top/2018/12/28/SpringBoot项目的打包与部署/</id>
    <published>2018-12-28T12:15:13.000Z</published>
    <updated>2019-01-11T05:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot项目的打包与部署"><a href="#SpringBoot项目的打包与部署" class="headerlink" title="SpringBoot项目的打包与部署"></a>SpringBoot项目的打包与部署</h2><h3 id="1-打包"><a href="#1-打包" class="headerlink" title="1.打包"></a>1.打包</h3><p>到我们的项目目录下执行打包命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p><img src="/uploads/springboot181228/1.png" alt=""></p><p>打包成功后可以看到 <code>BUILD SUCCESS</code>。</p><p><img src="/uploads/springboot181228/2.png" alt=""></p><p>target目录下的o2o-0.0.1-SNAPSHOT.jar就是我们打包好的jar包了。<br>这里生成这个版本的jar包的原因是我们在pom.xml中的配置。<br>这里可以通过命令 java -jar o2o-0.0.1-SNAPSHOT.jar来启动我们的项目（注意要将IDE中已经启动的服务关掉否则会冲突）。</p><p><img src="/uploads/springboot181228/3.png" alt=""></p><p>这个时候访问我们项目 <code>localhost:8080/frontend/index</code> 发现报404。<br>原因是我们并没有将html页面成功打包进去。<br>其实我们将jar改为war就好了。<br>我们常规需要的也是要打包成war包。</p><p><img src="/uploads/springboot181228/4.png" alt=""></p><h3 id="2-部署"><a href="#2-部署" class="headerlink" title="2.部署"></a>2.部署</h3><p>将war包上传到服务器上<br><code>scp o2o-0.0.1-SNAPSHOT.war work@101.132.138.185:~</code><br>将之前的java和tomcat进程都<code>kill</code>掉。<br>去服务器中启动我们的war包程序<br><code>java -jar o2o-0.0.1-SNAPSHOT.war</code><br>这里默认是8080端口，可以在<code>application.properties</code>中设置成其它端口。<br>输入地址，可以访问到了，部署成功。</p><p><img src="/uploads/springboot181228/5.png" alt=""></p><p>这里java -jar 启动有一个问题，当我们的终端与服务器失去连接后，<br>程序就不再运行了<br>那么要如何让服务器能持续的运行呢<br>创建一个脚本文件 startup.sh  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim startup.sh</span><br><span class="line">#!/bin/sh nohup后台运行 （守护进程）</span><br><span class="line">nohup java -jar /home/work/o2o-0.0.1-SNAPSHOT.war &amp;</span><br></pre></td></tr></table></figure><p>保存退出后启动startup.sh就好了<br><code>sh startup.sh</code></p><p><img src="/uploads/springboot181228/6.png" alt=""></p><p>这样就一直跑在我们的服务器了如果要关掉kill掉就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBoot项目的打包与部署&quot;&gt;&lt;a href=&quot;#SpringBoot项目的打包与部署&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot项目的打包与部署&quot;&gt;&lt;/a&gt;SpringBoot项目的打包与部署&lt;/h2&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot验证码Kaptcha的使用</title>
    <link href="http://www.herobin.top/2018/12/28/SpringBoot%E9%AA%8C%E8%AF%81%E7%A0%81Kaptcha%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.herobin.top/2018/12/28/SpringBoot验证码Kaptcha的使用/</id>
    <published>2018-12-28T12:01:51.000Z</published>
    <updated>2019-01-11T05:46:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>在ssm中kapcha的配置主要写在web.xml中，而springboot中并没有使用web.xml文件，<br>所以我们要重新总结下验证码在springboot中的使用。<br>首先我们要将和web.xml中的Kaptcha的相关配置写入到application.properties中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Kaptcha的配置</span><br><span class="line">kaptcha.border=no</span><br><span class="line">kaptcha.textproducer.font.color=red</span><br><span class="line">kaptcha.textproducer.font.size=43</span><br><span class="line">kaptcha.image.width=135</span><br><span class="line">kaptcha.image.height=50</span><br><span class="line">kaptcha.textproducer.char.string=ACDEFHKPRSTWX345679</span><br><span class="line">kaptcha.noise.color=black</span><br><span class="line">kaptcha.textproducer.char.length=4</span><br><span class="line">kaptcha.textproducer.font.names=Arial</span><br></pre></td></tr></table></figure><p>再在MvcConfiguration类中进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;kaptcha.border&#125;&quot;)</span><br><span class="line">private String border;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.textproducer.font.color&#125;&quot;)</span><br><span class="line">private String fcolor;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.image.width&#125;&quot;)</span><br><span class="line">private String width;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.textproducer.char.string&#125;&quot;)</span><br><span class="line">private String cString;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.image.height&#125;&quot;)</span><br><span class="line">private String height;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.textproducer.font.size&#125;&quot;)</span><br><span class="line">private String fsize;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.noise.color&#125;&quot;)</span><br><span class="line">private String nColor;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.textproducer.char.length&#125;&quot;)</span><br><span class="line">private String clength;</span><br><span class="line">@Value(&quot;$&#123;kaptcha.textproducer.font.names&#125;&quot;)</span><br><span class="line">private String fnames;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 由于web.xml不生效了，需要在这里配置Kaptcha验证码Servlet</span><br><span class="line"> * @return</span><br><span class="line"> * @throws ServletException</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">public ServletRegistrationBean servletRegistrationBean() throws ServletException&#123;</span><br><span class="line">                //只要在前端访问Kaptcha这个路由就会启动这个servlet</span><br><span class="line">ServletRegistrationBean servlet = new ServletRegistrationBean(new KaptchaServlet(),&quot;/Kaptcha&quot;);</span><br><span class="line">servlet.addInitParameter(&quot;keptcha.border&quot;, border);//无边框</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.textproducer.font.color&quot;, fcolor);//字体颜色</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.image.width&quot;, width);//图片宽度</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.textproducer.char.string&quot;, cString);//使用哪些字符生成验证码</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.image.height&quot;, height);//图片高度</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.textproducer.font.size&quot;, fsize);//字体大小</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.noise.color&quot;, nColor);//干扰线的颜色</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.textproducer.char.length&quot;, clength);//字符个数</span><br><span class="line">servlet.addInitParameter(&quot;kaptcha.textproducer.font.names&quot;, fnames);//字体</span><br><span class="line">return servlet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然还有别忘了pom里面jar包的引入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 验证码相关 --&gt;</span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.github.penggle/kaptcha --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.penggle&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;kaptcha&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在ssm中kapcha的配置主要写在web.xml中，而springboot中并没有使用web.xml文件，&lt;br&gt;所以我们要重新总结下验证码在springboot中的使用。&lt;br&gt;首先我们要将和web.xml中的Kaptcha的相关配置写入到application.pro
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot初体验</title>
    <link href="http://www.herobin.top/2018/12/27/SpringBoot%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.herobin.top/2018/12/27/SpringBoot初体验/</id>
    <published>2018-12-27T11:09:40.000Z</published>
    <updated>2019-01-11T05:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先SpringBoot的开发有两种主流的软件Idea和Spring Tool Suite（感觉就是集成了spring开发环境的eclipse）。<br>这里我们选用后者。可在springboot的官网spring.io里下载。<br>配置好jdk和maven的配置信息。</p><p><img src="/uploads/springboot181227/1.png" alt=""></p><p>创建项目 <code>new -&gt; spring starter project</code><br>输入配置信息，这里我们选用了springboot2.1.1版本<br>选中我们需要的部分包。</p><p><img src="/uploads/springboot181227/2.png" alt=""></p><p>另外还要注意最好将我们的maven配置改为阿里云镜像仓库(maven安装目录下的conf/setting.xml中)。</p><p><img src="/uploads/springboot181227/3.png" alt=""></p><p>application.properties是springboot非常核心的一个部分。<br>几乎所有的配置信息都会写在这里面包括端口，数据库，mybatis，redis，验证码等等。不过在初始编辑application.properties时写中文注释可以会乱码，编码改为utf8即可。</p><p>修改pom文件，写入我们需要的jar包依赖，和ssm比较，因为我们新建的时候预先引入了web和mybatis两个模块，所以这两个不用再次引入，因为springboot自带测试所以junit也不需要了(去掉spring，mybatis，junit)。<br>将dao entity mapper创建好后在测试用例中测试报错如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.AbstractMethodError: Method com/mchange/v2/c3p0/impl/NewProxyPreparedStatement.isClosed()Z is abstract</span><br></pre></td></tr></table></figure><p>将pom中的c3p0镜像替换后问题得到解决</p><p><img src="/uploads/springboot181227/4.png" alt=""></p><p>将全部package及webapp写好后启动springboot发现跳转到了测试接口hello springboot中，发现是将value写成了name（小坑注意）。</p><p><img src="/uploads/springboot181227/5.png" alt=""></p><p>再次访问index接口发现前端报错404。</p><p><img src="/uploads/springboot181227/6.png" alt=""></p><p>这里是因为以前的springboot的版本是1.5.8，这里我们使用了2.1.1.<br>在新版本中WebMvcConfigurationAdapter已经废弃，使用了系统建议的WebMvcConfigurationSupport也出现了上图的问题。考虑应该是静态资源的配置问题和视图跳转控制器的问题，也就是原属于WebMvcConfigurationAdapter的addResourceHandlers方法和addViewController方法没有起到应该起到的作用。<br>解决方法：<br>1.解决视图跳转问题，不再采用继承WebMvcConfigurationSupport的方式，改为直接实现WebMvcConfigurer接口，将生成视图解析器由方法转为@Bean注解的类生成</p><p><img src="/uploads/springboot181227/7.png" alt=""></p><p>跳转成功解决。<br>2.跳转成功解决后发现前端页面加载静态资源出错</p><p><img src="/uploads/springboot181227/8.png" alt=""></p><p>这里其实是我们的addResourceHandlers方法编写错误了，其实重写的时候并不需要对resource进行重写，空方法即可。但是这里我们要写好对图片路径的拼接。（这里是替代ssm中在tomcat的server.xml中docBase配置的替代）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 静态资源配置</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span><br><span class="line">//registry.addResourceHandler(&quot;/resources/**&quot;).addResourceLocations(&quot;/resources/&quot;);</span><br><span class="line">registry.addResourceHandler(&quot;/upload/**&quot;).addResourceLocations(&quot;file:/Users/binzhang/Documents/shopImages/upload/&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时发现前端还是访问不到我们的图片，在network中可以看到url<br><a href="http://localhost:8080/upload/item/shop/1.jpg" target="_blank" rel="noopener">http://localhost:8080/upload/item/shop/1.jpg</a><br>直接拷贝到浏览器也发现找不到该图片<br>这是因为在application.properties中我们配置了前缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#加入/o2o前缀</span><br><span class="line">server.servlet.context-path=/o2o</span><br></pre></td></tr></table></figure><p>所以我们也要将项目的前缀追加到我们访问图片的路径地址中<br><a href="http://localhost:8080/o2o/upload/item/shop/1.jpg" target="_blank" rel="noopener">http://localhost:8080/o2o/upload/item/shop/1.jpg</a><br>这样我们就可以访问到了。<br>在代码中添加前缀的步骤(前端实现)：<br>1.在common.js中加入getContextPath方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 获取项目的ContextPath以便修正图片路由让其正常显示</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">function getContextPath()&#123;</span><br><span class="line">return &quot;/o2o/&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在需要加载图片页面对应的js中加载图片的地方添加getContextPath前缀就好了</p><p><img src="/uploads/springboot181227/9.png" alt=""></p><p>注意主要忘了在对应的html中引入common.js。<br>至此，我们的springboot项目可以正常运行了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先SpringBoot的开发有两种主流的软件Idea和Spring Tool Suite（感觉就是集成了spring开发环境的eclipse）。&lt;br&gt;这里我们选用后者。可在springboot的官网spring.io里下载。&lt;br&gt;配置好jdk和maven的配置信息。&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="spring" scheme="http://www.herobin.top/tags/spring/"/>
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>定期给数据库以及图片进行备份</title>
    <link href="http://www.herobin.top/2018/12/24/%E5%AE%9A%E6%9C%9F%E7%BB%99%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%A5%E5%8F%8A%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD/"/>
    <id>http://www.herobin.top/2018/12/24/定期给数据库以及图片进行备份/</id>
    <published>2018-12-24T11:31:53.000Z</published>
    <updated>2019-01-11T05:37:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定期给数据库以及图片进行备份"><a href="#定期给数据库以及图片进行备份" class="headerlink" title="定期给数据库以及图片进行备份"></a>定期给数据库以及图片进行备份</h2><h3 id="实现服务器每天零点零分对数据库和图片进行自动备份"><a href="#实现服务器每天零点零分对数据库和图片进行自动备份" class="headerlink" title="实现服务器每天零点零分对数据库和图片进行自动备份"></a>实现服务器每天零点零分对数据库和图片进行自动备份</h3><p>利用linux自带的crontab实现数据库以及图片的定期备份。<br>登录阿里云服务器后<br>创建一个文件夹保存我们的备份文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir backup</span><br><span class="line">cd backup</span><br><span class="line">mkdir sql</span><br><span class="line">mkdir image</span><br></pre></td></tr></table></figure><h4 id="备份数据库信息"><a href="#备份数据库信息" class="headerlink" title="备份数据库信息"></a>备份数据库信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd sql</span><br><span class="line">mysqldump -uroot -pyourpassword o2o &gt; /root/backup/sql/o2o`date +%Y%m%d%H%M%S`.sql</span><br></pre></td></tr></table></figure><p><img src="/uploads/backup181224/1.png" alt=""></p><p>可以看到sql备份文件已经生成了。</p><h4 id="备份图片压缩包"><a href="#备份图片压缩包" class="headerlink" title="备份图片压缩包"></a>备份图片压缩包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf /root/backup/image/image `date +%Y%m%d%H%M%S`.tar.gz /root/shopimages/upload/</span><br></pre></td></tr></table></figure><p>就可以发现图片的压缩包生成在目录<code>root/backup/image</code>下了</p><p>新建 <code>backup.sh</code>文件将前面的两行指令编辑进去</p><p><code>vim backup.sh</code></p><p><img src="/uploads/backup181224/2.png" alt=""></p><p>执行<br><code>sh backup.sh</code><br>可以发现 <code>sql</code>和<code>image</code>下都生成了新的备份文件.</p><h4 id="通过linux的crontab来设定定时任务实现定期备份"><a href="#通过linux的crontab来设定定时任务实现定期备份" class="headerlink" title="通过linux的crontab来设定定时任务实现定期备份"></a>通过<code>linux</code>的<code>crontab</code>来设定定时任务实现定期备份</h4><p>查看当前已有的定时任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><p>因为现在还没有，所以没有查出来</p><p>现在编写定时任务定期执行我们的<code>backup.sh</code></p><p>这里我们使用在线Cron表达式生成器来生成我们的命令（百度：在线cron表达式生成器）</p><p>注意这里是不支持秒和年的  只支持从分钟到周这五个</p><p>选中分钟 将Cron表达式中的？前面的五个*拷贝出来去<code>contab -e</code>中使用（每分钟执行一次的意思）<br>使用 <code>crontab -e</code> 命令可以设置我们的命令</p><p><img src="/uploads/backup181224/3.png" alt=""></p><p>通过命令 <code>tail -f /var/log/cron</code> 可以看到我们定期备份的cron命令已经执行。</p><p><img src="/uploads/backup181224/4.png" alt=""></p><p>我们就可以发现每分钟都会生成新的备份文件了，当然现实场景中我们并不需要每分钟都备份。</p><p>我们去备份每天的凌晨备份，拷贝对应的正则表达式</p><p>因为这里秒数我们是没办法准确控制0秒的,所以拷贝从第二个零开始</p><p><img src="/uploads/backup181224/5.png" alt=""></p><p>去<code>crontab -e</code> 中将原来的每分钟的替换掉</p><p><img src="/uploads/backup181224/6.png" alt=""></p><p>这里会报错，将？改为*就好了，后面可以去具体了解crontab。</p><p><img src="/uploads/backup181224/7.png" alt=""></p><p>这样就是每天的零点零分去执行一次了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定期给数据库以及图片进行备份&quot;&gt;&lt;a href=&quot;#定期给数据库以及图片进行备份&quot; class=&quot;headerlink&quot; title=&quot;定期给数据库以及图片进行备份&quot;&gt;&lt;/a&gt;定期给数据库以及图片进行备份&lt;/h2&gt;&lt;h3 id=&quot;实现服务器每天零点零分对数据库和图
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="数据库" scheme="http://www.herobin.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云碰到的几个坑</title>
    <link href="http://www.herobin.top/2018/12/24/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%A2%B0%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91/"/>
    <id>http://www.herobin.top/2018/12/24/使用阿里云碰到的几个坑/</id>
    <published>2018-12-24T07:11:19.000Z</published>
    <updated>2019-01-11T05:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一个坑"><a href="#第一个坑" class="headerlink" title="第一个坑"></a>第一个坑</h3><h3 id="阿里云系统重置后远程连接失败问题"><a href="#阿里云系统重置后远程连接失败问题" class="headerlink" title="阿里云系统重置后远程连接失败问题"></a>阿里云系统重置后远程连接失败问题</h3><p>因故将阿里云系统重置后，要将开发环境scp到服务器上时连接失败，ssh远程连接同样失败。可以发现报错信息如下：</p><p><img src="/uploads/aliyun181224/3.png" alt=""></p><p>以编辑器进入这个文件<code>vi /Users/binzhang/.ssh/known_hosts</code>将红线框部分删除掉。</p><p><img src="/uploads/aliyun181224/4.png" alt=""></p><p>问题得到解决，原因是在我们第一次远程连接的时候，本机会将远程机器的信息写到<code>/Users/binzhang/.ssh/known_hosts</code>文件中，所以如果远程重装系统了，本机一定要先清理掉。</p><p>解决方法原文：<br><a href="https://blog.csdn.net/wd2014610/article/details/79945424" target="_blank" rel="noopener">https://blog.csdn.net/wd2014610/article/details/79945424</a></p><h3 id="第二个坑"><a href="#第二个坑" class="headerlink" title="第二个坑"></a>第二个坑</h3><h3 id="修改tomcat-server-xml启动报错问题"><a href="#修改tomcat-server-xml启动报错问题" class="headerlink" title="修改tomcat server.xml启动报错问题"></a>修改tomcat server.xml启动报错问题</h3><p>首先我们在root用户目录下新建了一个shopimages文件夹，将shop项目相关的图片都放在了这下面，再通过在server.xml中对路径的补全来访问图片地址，这个时候没有问题</p><p><img src="/uploads/aliyun181224/1.png" alt=""></p><p>因为要进行eclipse的远程调试，而root并不支持远程调试，我们创建了一个新用户work并在work下部署了新的tomcat，在work下的tomcat下修改为同样的配置后报错。将配置修改后问题解决。应为work用户没有访问root目录的权限导致。</p><p><img src="/uploads/aliyun181224/2.png" alt=""></p><h3 id="第三个坑"><a href="#第三个坑" class="headerlink" title="第三个坑"></a>第三个坑</h3><h3 id="本地数据库软件连接不上阿里云上的数据库问题"><a href="#本地数据库软件连接不上阿里云上的数据库问题" class="headerlink" title="本地数据库软件连接不上阿里云上的数据库问题"></a>本地数据库软件连接不上阿里云上的数据库问题</h3><p>在使用本机的MySQL Workbench连接阿里云上的mysql时报如下错误：</p><p><img src="/uploads/aliyun181224/5.png" alt=""></p><p>解决方法：</p><p><img src="/uploads/aliyun181224/6.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一个坑&quot;&gt;&lt;a href=&quot;#第一个坑&quot; class=&quot;headerlink&quot; title=&quot;第一个坑&quot;&gt;&lt;/a&gt;第一个坑&lt;/h3&gt;&lt;h3 id=&quot;阿里云系统重置后远程连接失败问题&quot;&gt;&lt;a href=&quot;#阿里云系统重置后远程连接失败问题&quot; class=&quot;head
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="服务器" scheme="http://www.herobin.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>redis的使用</title>
    <link href="http://www.herobin.top/2018/12/18/redis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.herobin.top/2018/12/18/redis的使用/</id>
    <published>2018-12-18T03:26:45.000Z</published>
    <updated>2019-01-11T05:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java中融入redis缓存技术的使用"><a href="#java中融入redis缓存技术的使用" class="headerlink" title="java中融入redis缓存技术的使用"></a>java中融入redis缓存技术的使用</h2><p>redis相关的配置文件及工具类等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pom.xml       导入redis.clients jedis 这里用到的版本号 2.9.0</span><br><span class="line">spring-redis.xml    这里能直接使用redis.properties里定义的属性是因为在spring-dao.xml引入了</span><br><span class="line">redis.properties</span><br><span class="line">web.xml(这里已经通过spring-*.xml都引入了)</span><br><span class="line">spring-dao.xml（和jdbc.properties一样将redis.properties引入）</span><br><span class="line">JedisPoolWriper.java</span><br><span class="line">JedisUtil.java</span><br><span class="line">CacheService(&amp;impl).java</span><br></pre></td></tr></table></figure><p>因为我们的redis.properties里的配置是阿里云上面的，所以在直接运行时会报错.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not get a resource from the pool</span><br></pre></td></tr></table></figure><p>在我们本地执行命令看是否能连上阿里云上的redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 101.132.138.185</span><br></pre></td></tr></table></figure><p>然后打ping报error了，并没有收到意料中的pong，可以看到错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DENIED Redis is running in protected mode</span><br></pre></td></tr></table></figure><p>说明现在redis处于保护模式下 这种模式下是不允许远程连接的，所以我们要改变连接模式<br>登录阿里云去更改redis的设置</p><p><img src="/uploads/redis181218/1.png" alt=""></p><p>redis.conf中将protected-mode由yes改为no</p><p><img src="/uploads/redis181218/2.png" alt=""></p><p>重启redis（先找到进程编号，再关掉进程）<br>将redis.conf传入redis-server启动redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/redis-server redis.conf</span><br></pre></td></tr></table></figure><p><img src="/uploads/redis181218/3.png" alt=""></p><p>再次查看发现redis已经又启动起来了<br>回到本地环境，再次远程访问服务器的redis，输入ping，输出pong，连接成功。</p><p><img src="/uploads/redis181218/4.png" alt=""></p><p>这个时候我们的本地就可以正常使用redis功能了<br>在service层中写好代码，这里我们是以地区类的service实现类来做例子，因为通常地区的变更很少，<br>所以我们可以从缓存中读出来，减少服务器数据库压力。<br>AreaService.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface AreaService &#123;</span><br><span class="line"></span><br><span class="line">public static final String AREALISTKEY = &quot;arealist&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取区域列表，优先从缓存读取</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">List&lt;Area&gt; getAreaList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AreaServiceImpl.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class AreaServiceImpl implements AreaService&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private AreaDao areaDao;</span><br><span class="line">@Autowired</span><br><span class="line">private JedisUtil.Keys jedisKeys;</span><br><span class="line">@Autowired</span><br><span class="line">private JedisUtil.Strings jedisStrings;</span><br><span class="line"></span><br><span class="line">//为了方便销毁redis的值，我们要将这个key的值放到接口中去 并且在变成不可更改的final值</span><br><span class="line">//private static String AREALISTKEY = &quot;arealist&quot;;</span><br><span class="line">private static Logger logger = LoggerFactory.getLogger(AreaServiceImpl.class);</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">@Transactional</span><br><span class="line">public List&lt;Area&gt; getAreaList() &#123;</span><br><span class="line">String key = AREALISTKEY;</span><br><span class="line">List&lt;Area&gt; areaList = null;</span><br><span class="line">ObjectMapper mapper = new ObjectMapper();</span><br><span class="line">if(!jedisKeys.exists(key))&#123;</span><br><span class="line">//当jedis没有目标信息时</span><br><span class="line">//1.从数据库中取出目标集合</span><br><span class="line">areaList = areaDao.queryArea();</span><br><span class="line">String jsonString;</span><br><span class="line">try &#123;</span><br><span class="line">//2.将目标集合转化为json字符串</span><br><span class="line">jsonString = mapper.writeValueAsString(areaList);</span><br><span class="line">&#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">throw new AreaOperationException(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">//3.将json串存入redis中</span><br><span class="line">jedisStrings.set(key, jsonString);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">String jsonString = jedisStrings.get(key);</span><br><span class="line">JavaType javaType = mapper.getTypeFactory().constructParametricType(ArrayList.class, Area.class);</span><br><span class="line">try &#123;</span><br><span class="line">areaList = mapper.readValue(jsonString, javaType);</span><br><span class="line">&#125; catch (JsonParseException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">throw new AreaOperationException(e.getMessage());</span><br><span class="line">&#125; catch (JsonMappingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">throw new AreaOperationException(e.getMessage());</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.error(e.getMessage());</span><br><span class="line">throw new AreaOperationException(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return areaList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里redis使用成功了，当需要加载地区信息时，首先会先查看redis中是否有地区信息，<br>如果没有去数据库中查找出来并转换为json串存到redis中，下次就可以在redis中读到了</p><p>可是如果我们长期从这里读取，当数据库里面的信息更新改变时就读不到了，所以我们要定期更新。</p><p>这里我们通过CacheService来清空我们想要清除的redis key的信息。<br>CacheService.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface CacheService &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 依据key前缀删除匹配该模式下的所有key-value 如传入：shopCategory，则shopcategory_allfirstlevel等所有</span><br><span class="line"> * 以shopcategory打头的key-value都会被清空</span><br><span class="line"> * @param keyPrefix</span><br><span class="line"> */</span><br><span class="line">void removeFromCache(String keyPrefix);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CacheServiceImple.java:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class CacheServiceImpl implements CacheService&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private JedisUtil.Keys jedisKeys;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void removeFromCache(String keyPrefix) &#123;</span><br><span class="line">Set&lt;String&gt; keySet = jedisKeys.keys(keyPrefix + &quot;*&quot;);</span><br><span class="line">for(String key:keySet)&#123;</span><br><span class="line">jedisKeys.del(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中测试发现，第一次进入query方法是从redis中读到的，在经过cache的remove方法后，<br>第二次进入query方法就是从数据库中重新读取写入redis缓存中的了.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class AreaServiceTest extends BaseTest&#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private AreaService areaService;</span><br><span class="line">@Autowired</span><br><span class="line">private CacheService cacheService;</span><br><span class="line">@Test</span><br><span class="line">public void testGetAreaList()&#123;</span><br><span class="line">//因为之前redis中已经存过所以，这里是从redis中取出来的</span><br><span class="line">List&lt;Area&gt; areaList = areaService.getAreaList();</span><br><span class="line">assertEquals(&quot;杭电&quot;,areaList.get(0).getAreaName());</span><br><span class="line">//删除redis中key为arealist的缓存数据</span><br><span class="line">cacheService.removeFromCache(areaService.AREALISTKEY);</span><br><span class="line">//上面已经删除了，所以这里会访问数据库并再次存入redis</span><br><span class="line">areaList = areaService.getAreaList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，redis配置结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java中融入redis缓存技术的使用&quot;&gt;&lt;a href=&quot;#java中融入redis缓存技术的使用&quot; class=&quot;headerlink&quot; title=&quot;java中融入redis缓存技术的使用&quot;&gt;&lt;/a&gt;java中融入redis缓存技术的使用&lt;/h2&gt;&lt;p&gt;re
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="redis" scheme="http://www.herobin.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>加密连接数据库明文密码</title>
    <link href="http://www.herobin.top/2018/12/17/%E5%8A%A0%E5%AF%86%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%98%8E%E6%96%87%E5%AF%86%E7%A0%81/"/>
    <id>http://www.herobin.top/2018/12/17/加密连接数据库明文密码/</id>
    <published>2018-12-17T08:45:34.000Z</published>
    <updated>2019-01-11T05:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库密码明文加密"><a href="#数据库密码明文加密" class="headerlink" title="数据库密码明文加密"></a>数据库密码明文加密</h2><p>我们常规的数据库信息都是写在jdbc.properties里面的</p><p><img src="/uploads/databasesafepassword/1.png" alt=""></p><p>这样直接将数据库账号名和密码放在代码中是有一定风险的，存在被黑客窃取的可能，所以我们可以使用加密过的字符串来替换其中的明文密码。效果如图：</p><p><img src="/uploads/databasesafepassword/2.png" alt=""></p><p>那么这一串加密过的字符串是怎么得到的呢？这里我们使用的是DES加密算法，这里主要用到了两个类,<code>DESUtils</code>和<code>EncryptPropertyPlaceholderConfigurer</code>,所以需要用到的时候可以去coding下熟悉相关逻辑，简要的总结就是DESUtils给我们提供了将我们的数据库用户名和密码通过我们自己设定的key和charset来生成加密后的字符串，将这个字符串拷贝到jdbc.properties中替换掉我们的明文的密码信息。然后再spring-dao.xml中加载jdbc.properties不再使用以前的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br></pre></td></tr></table></figure><p>换成使用<code>EncryptPropertyPlaceholderConfigurer</code>这个工具类来加载jdbc.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class=&quot;com.imooc.o2o.util.EncryptPropertyPlaceholderConfigurer&quot;&gt;</span><br><span class="line">&lt;property name=&quot;locations&quot;&gt;</span><br><span class="line">&lt;list&gt;</span><br><span class="line">&lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class="line">&lt;value&gt;classpath:redis.properties&lt;/value&gt;</span><br><span class="line">&lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;fileEncoding&quot; value=&quot;UTF-8&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库密码明文加密&quot;&gt;&lt;a href=&quot;#数据库密码明文加密&quot; class=&quot;headerlink&quot; title=&quot;数据库密码明文加密&quot;&gt;&lt;/a&gt;数据库密码明文加密&lt;/h2&gt;&lt;p&gt;我们常规的数据库信息都是写在jdbc.properties里面的&lt;/p&gt;
&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="数据库" scheme="http://www.herobin.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse远程调试</title>
    <link href="http://www.herobin.top/2018/12/17/Eclipse%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    <id>http://www.herobin.top/2018/12/17/Eclipse远程调试/</id>
    <published>2018-12-17T08:24:19.000Z</published>
    <updated>2019-01-11T05:44:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目现在部署在服务器上，我们想要通过本地Eclipse来远程调试<br>在服务器上输入命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep tomcat</span><br></pre></td></tr></table></figure><p>可以看到我们tomcat是由root用户启动的,这里需要我们改为其他用户,root启动的进程不支持远程调试,<br>这里我们要改为用普通的账号启动tomcat.</p><p>这里要注意,普通账号是没办法运行root账号安装的软件的.所以我们要用普通账号安装一下tomcat.</p><p>创建新用户的指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser work</span><br></pre></td></tr></table></figure><p>输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd work</span><br></pre></td></tr></table></figure><p><img src="/uploads/eclipse181217/1.png" alt=""></p><p><code>shudown</code>掉现在的tomcat程序,在tomcat目录下执行<code>bin/shutdown.sh</code></p><p>切换账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su work</span><br></pre></td></tr></table></figure><p>切换回这个账号的根目录<code>cd ~</code>,可以看到当前的用户路径<code>/home/work</code>,再次上传本地的tomcat到服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp apache-tomcat-8.5.35.tar.gz work@101.132.138.185:~</span><br></pre></td></tr></table></figure><p>解压这个tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf file.tar.gz</span><br></pre></td></tr></table></figure><p>再将我们的代码部署到上面因为没有改端口号用过<code>ip:8080/o2o</code>就可以访问到了.可是微信登录只能访问80端口,所以我们要做一个转发操作.</p><p>切换回<code>root</code>用户关掉<code>firewalld</code>服务,安装<code>iptables-services</code>服务.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><p>将对80端口的请求转发到8080</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</span><br><span class="line">service iptables save #让上面的指令生效</span><br></pre></td></tr></table></figure><p>这个时候已经生效了,但是重启服务器就会失效,执行下面两条指令让它永久生效.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart iptables.service</span><br><span class="line">systemctl enable iptables.service</span><br></pre></td></tr></table></figure><p>修改tomcat配置(work下的)<br>修改<code>bin/catalina.sh</code>  <code>vim catalina.sh</code><br>加入的部分：</p><p><img src="/uploads/eclipse181217/2.png" alt=""></p><p>这句话的意义是 告诉tomcat你要开启一个端口支持远程调试,同时别忘了将服务器的这两个端口号打开</p><p><img src="/uploads/eclipse181217/3.png" alt=""></p><p>切换回<code>work</code> 重启<code>tomcat</code> <code>shutdown</code> <code>start</code></p><p>这个时候再 <code>ps -ef | grep tomcat</code>,就可以发现这个进程是work的了,包括我们设置的调试信息也有了</p><p><img src="/uploads/eclipse181217/4.png" alt=""></p><p>回到我们的eclipse,在启动debug服务器（小昆虫）那里找到 <code>Debug</code> <code>Configuration</code>修改配置如下</p><p><img src="/uploads/eclipse181217/5.png" alt=""></p><p>Eclipse远程调试总结<br>添加新用户，并赋予root权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser work</span><br><span class="line">passwd work</span><br></pre></td></tr></table></figure><p>上传tomcat软件，上传程序war包</p><p>将80端口的请求转发至8080端口（永久生效）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service #停止firewall</span><br><span class="line">systemctl disable firewalld.service # 禁止firewall开机启动</span><br><span class="line">yum install iptables-services #安装</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</span><br><span class="line">service iptables save</span><br><span class="line">systemctl restart iptables.service</span><br><span class="line">systemctl enable iptables.service</span><br></pre></td></tr></table></figure><p>远程调试tomcat<code>vim bin/catalina.sh</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_OPTS=&quot;-Xdebug  -Xrunjdwp:transport=dt_socket,address=8888,server=y,suspend=n&quot;</span><br></pre></td></tr></table></figure><p>开通阿里云控制台安全组策略8888端口<br>在eclipse debug做对应的配置即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目现在部署在服务器上，我们想要通过本地Eclipse来远程调试&lt;br&gt;在服务器上输入命名&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow基础</title>
    <link href="http://www.herobin.top/2018/11/05/tensorflow%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.herobin.top/2018/11/05/tensorflow基础/</id>
    <published>2018-11-05T02:54:50.000Z</published>
    <updated>2019-01-11T05:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些tensorflow学习过程中需要注意的随笔"><a href="#一些tensorflow学习过程中需要注意的随笔" class="headerlink" title="一些tensorflow学习过程中需要注意的随笔"></a>一些tensorflow学习过程中需要注意的随笔</h1><p>tensorflow 可以分解为tensor（张量）和flow（流或流动两部分）。</p><p>任意维度的数据可以称作“张量”，如一维数组、二维矩阵、N维数据。tensorflow如果直译为中文，那就是“张量流”，它最初想要表达的含义是保持计算节点不变，让数据在不同的计算设备上传输并计算。</p><p>因为tensorflow主要用于深度学习方面，在深度学习的计算过程中有前向计算和后向传播的过程，所以深度学习中间的每个节点基本上都要执行前向的数值计算，以及后向的残差传播和参数更新。tensorflow把内部的数据都包装成tensor的类型，并且在tensor中包含了前向计算和反向传播时的残差计算，让所有的计算过程都练了起来。</p><p>tensorflow通过一个叫数据流图的方式来组织它的数据和运算。在使用tensorflow实现深度学习算法时，先将所有操作（operation）表达成一张图。张量从算法的开始走到结束完成一次向前运算，而残差从后往前就完成了一次后向传播来更新我们要训练的参数。</p><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>TensorFlow的计算需要在会话中执行。当创建一个会话时，如果没有传递参数，默认情况下它会启动默认的图来构造图结构，并且会将“图”中定义的op根据定义的情况分发到CPU或者GPU的设备上去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.constant(<span class="number">1</span>, name=<span class="string">"value1"</span>)</span><br><span class="line">v2 = tf.constant(<span class="number">1</span>, name=<span class="string">"value2"</span>)</span><br><span class="line">add_op = tf.add(v1, v2, name=<span class="string">"add_op_name"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  result = sess.run(add_op)</span><br><span class="line">  print(<span class="string">"1 + 1 = %.0f"</span> % result)</span><br></pre></td></tr></table></figure><p>采用with语句包装，可以在结束with语句块的时候，自动销毁会话的资源。</p><p>为什么TensorFlow非得弄一个会话，并且让这些TensorFlow内部的Tensor必须在会话中才能执行，而不是直接使用Python的对象执行呢？这有点类似我们平时用到的Numpy库。我们经常会使用Numpy包来进行一些复杂的计算，比如矩阵乘法。这些计算的内部实现可能是Numpy采用非Python语言写的，从而使得运行效率更高。TensorFlow也类似。因为深度学习的计算很大部分是矩阵和向量的运算，采用GPU的计算运行速度比CPU会有一个数量级上的差别。如果直接使用Python的对象执行，以为python的变量是在CPU上的，所以数据就会频繁地在GPU和CPU的内存传送，效率会大大降低。这对于本来计算量就很大的训练任务简直无法承受了，所以TensorFlow为了更好地避免这些开销，采用会话中的实际计算是在Python之外独立运行的。</p><h3 id="使用placeholder填充方式读取数据"><a href="#使用placeholder填充方式读取数据" class="headerlink" title="使用placeholder填充方式读取数据"></a>使用placeholder填充方式读取数据</h3><p>placeholder填充方式的用法就像它的名字一样，在构建计算图的时候，在要输入的数据的变量的位置采用占位的方式先保留一个placeholder的张量，表示在构建图的时候并不知道这里实际的值是什么，需要在图执行时填充进来。</p><p>如果构建了一个包含placeholder操作的图，当在session中调用run方法时，placeholder占用的变量必须通过feed_dict参数传递进去，否则执行会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">v1 = tf.placeholder(tf.float32)</span><br><span class="line">v2 = tf.placeholder(tf.float32)</span><br><span class="line">v_mul = tf.multiply(v1,v2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"></span><br><span class="line">    value1 = input(<span class="string">"value1: "</span>)</span><br><span class="line">    value2 = input(<span class="string">"value2: "</span>)</span><br><span class="line"></span><br><span class="line">    mul_result = sess.run(v_mul,feed_dict=&#123;v1:value1,v2:value2&#125;)</span><br><span class="line">    print(mul_result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一些tensorflow学习过程中需要注意的随笔&quot;&gt;&lt;a href=&quot;#一些tensorflow学习过程中需要注意的随笔&quot; class=&quot;headerlink&quot; title=&quot;一些tensorflow学习过程中需要注意的随笔&quot;&gt;&lt;/a&gt;一些tensorflow学习
      
    
    </summary>
    
      <category term="python" scheme="http://www.herobin.top/categories/python/"/>
    
    
      <category term="python" scheme="http://www.herobin.top/tags/python/"/>
    
      <category term="人工智能" scheme="http://www.herobin.top/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="深度学习" scheme="http://www.herobin.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://www.herobin.top/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>could not create connection to database问题解决</title>
    <link href="http://www.herobin.top/2018/10/25/database/"/>
    <id>http://www.herobin.top/2018/10/25/database/</id>
    <published>2018-10-25T03:29:09.000Z</published>
    <updated>2019-01-11T05:47:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>could not create connection to databasewen问题解决</p><p>今天要将项目部署到阿里云服务器上时，先将项目里的数据库配置信息改为了阿里云上面的数据库信息，运行启动后报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">could not create connection to databasewen</span><br></pre></td></tr></table></figure><p>查找后发现本机是mysql5.6版本的，而阿里云上装的是mysql8.于是去pom文件中将数据库版本改掉，问题解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;!-- &lt;version&gt;5.1.37&lt;/version&gt; --&gt;</span><br><span class="line">&lt;version&gt;8.0.11&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;could not create connection to databasewen问题解决&lt;/p&gt;
&lt;p&gt;今天要将项目部署到阿里云服务器上时，先将项目里的数据库配置信息改为了阿里云上面的数据库信息，运行启动后报错&lt;/p&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="数据库" scheme="http://www.herobin.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>c#运行python程序</title>
    <link href="http://www.herobin.top/2018/10/23/c-%E8%BF%90%E8%A1%8Cpython%E7%A8%8B%E5%BA%8F/"/>
    <id>http://www.herobin.top/2018/10/23/c-运行python程序/</id>
    <published>2018-10-23T11:51:53.000Z</published>
    <updated>2019-01-11T05:36:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做实验室的水体项目，需要在c#中运行python程序。</p><p>开始百度到可以通过IronPython直接在c#中调用py文件，在试了一个简单的helloworld确实可以之后就以为搞定搁置了一段时间，在python程序写好后运行发现了问题，IronPython中并不能导入python的第三方模块如numpy。在google之后发现，IronPython是基于.Net平台的，只能加载CLR Assembly，除了标准库，不能加载一般的C Extension。而numpy这种恰好是编译过的，根本不可能在IronPython上正常使用，至此，IronPython方式作废。</p><p>想到的第二种方式是将Python文件打包为exe文件，再在c#中调用exe，这里是在python文件中写好main方法的，这样调用exe就可以直接执行，只要传入参数就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    render(sys.argv[1],sys.argv[2],sys.argv[3],sys.argv[4])</span><br></pre></td></tr></table></figure><p>这里面传入的四个参数是水体渲染需要的四个参数，第一个是文件路径，第二个是左上右下坐标，第三个是样本点坐标，第四个是样本点对应的值。这里本来后三个是数组格式的，但是在c#中传入double类型的二维数组之后出错，估计是因为python中没有指定数据类型的概念导致，所以将c#中的数组转化为拼接的字符串传了进来，在python程序中再将字符串按照对应的参数转化为数组。至此搞定了。</p><p>将python程序打包成exe是通过pyinstaller</p><p>通过pip安装pyinstaller</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><p>生成exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller yourprogram.py</span><br></pre></td></tr></table></figure><p>这样生成的是一个文件夹，生成单一可直接执行的最好用 -F的 方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F yourprogram.py</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近做实验室的水体项目，需要在c#中运行python程序。&lt;/p&gt;
&lt;p&gt;开始百度到可以通过IronPython直接在c#中调用py文件，在试了一个简单的helloworld确实可以之后就以为搞定搁置了一段时间，在python程序写好后运行发现了问题，IronPython中
      
    
    </summary>
    
      <category term="其他语言" scheme="http://www.herobin.top/categories/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://www.herobin.top/tags/python/"/>
    
      <category term="其他语言" scheme="http://www.herobin.top/tags/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>阿里云部署</title>
    <link href="http://www.herobin.top/2018/10/18/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95/"/>
    <id>http://www.herobin.top/2018/10/18/阿里云部署及微信开发调试/</id>
    <published>2018-10-18T05:58:03.000Z</published>
    <updated>2019-01-11T05:37:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云部署"><a href="#阿里云部署" class="headerlink" title="阿里云部署"></a>阿里云部署</h1><h2 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h2><h3 id="1-阿里云初始化与执行环境安装"><a href="#1-阿里云初始化与执行环境安装" class="headerlink" title="1.阿里云初始化与执行环境安装"></a>1.阿里云初始化与执行环境安装</h3><p>今天买了一年的阿里云服务器</p><p>开始安装需要的软件，通过在阿里云网站管理控制台的远程连接或者自己通过ssh命令连接到远程服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssh root@101.132.138.185</span><br></pre></td></tr></table></figure><p>接下来需要安装服务器上需要的一系列软件：</p><h4 id="1-1-JDK-这里选择的是JDK1-8"><a href="#1-1-JDK-这里选择的是JDK1-8" class="headerlink" title="1.1 JDK(这里选择的是JDK1.8)"></a>1.1 JDK(这里选择的是JDK1.8)</h4><p>下载地址为<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>选择的是<code>jdk-8u144-linux-x64.rpm</code></p><h4 id="1-2-Tomcat-8"><a href="#1-2-Tomcat-8" class="headerlink" title="1.2    Tomcat 8"></a>1.2    Tomcat 8</h4><p>下载地址为<br><a href="http://tomcat.apache.org/download-80.cgi#8.0.46" target="_blank" rel="noopener">http://tomcat.apache.org/download-80.cgi#8.0.46</a></p><p>选择的是<code>apache-tomcat-8.0.46.tar.gz</code></p><h4 id="1-3-Mysql-这里选择的是Mysql5-7-repo源，后通过centos自带的yum安装"><a href="#1-3-Mysql-这里选择的是Mysql5-7-repo源，后通过centos自带的yum安装" class="headerlink" title="1.3 Mysql(这里选择的是Mysql5.7)repo源，后通过centos自带的yum安装"></a>1.3 Mysql(这里选择的是Mysql5.7)repo源，后通过centos自带的yum安装</h4><p>下载的地址为<br><a href="https://dev.mysql.com/downloads/repo/yum/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/yum/</a></p><p>这里选择<code>mysql57-community-release-el7-11.noarch.rpm</code></p><h4 id="1-4Redis-可选，最好预先安装上，这里选择的版本为4-0-2"><a href="#1-4Redis-可选，最好预先安装上，这里选择的版本为4-0-2" class="headerlink" title="1.4Redis(可选，最好预先安装上，这里选择的版本为4.0.2)"></a>1.4Redis(可选，最好预先安装上，这里选择的版本为4.0.2)</h4><p>下载地址为<br><a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><p>这里选择<code>redis-4.0.2.tar.gz</code></p><p>将上面的软件都下载到本地,然后通过scp命令上传到服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /Users/binzhang/Documents/Images//1.jpg root@101.132.138.185:.</span><br></pre></td></tr></table></figure></p><p>此时进到远程服务器可以看到已经上传的软件<br><img src="/uploads/aliyun/201810181640001.png" alt=""></p><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>Java程序需要运行在JRE里边，所以要安装JDK</p><p>添加可执行权限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x jdk<span class="number">-8</span>u191-linux-x64.rpm</span><br></pre></td></tr></table></figure><p>安装RPM软件包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk<span class="number">-8</span>u191-linux-x64.rpm</span><br></pre></td></tr></table></figure><p>查看java的版本信息<code>java -version</code>，若出现版本信息则成功</p><h4 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h4><p>安装用来配置mysql的yum源的rpm包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh mysql80-community-release-el7<span class="number">-1.</span>noarch.rpm</span><br></pre></td></tr></table></figure><p>安装mysql</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>开启mysql服务<code>service mysqld start</code><br><img src="/uploads/aliyun/201810191139001.png" alt=""></p><p>mysql安装成功后创建的超级用户<code>root@localhost</code>的密码会被存储在<code>/var/log/mysqld.log</code>，可以使用如下命令查看密码<br><code>grep &#39;temporary&#39; password /var/log/mysqld.log</code><br><img src="/uploads/aliyun/201810191140001.png" alt=""></p><p>使用mysql生成的<code>root@localhost</code>用户和密码登录数据库，并修改其密码，具体命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;newpassword&apos;;</span><br></pre></td></tr></table></figure><p><img src="/uploads/aliyun/201810191141001.png" alt=""></p><p>注意这里其实遇到了一个问题，在本地远程连接阿里云数据库新建数据库显示账号没有权限，这里设置全部权限的语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"># 创建新用户并赋权</span><br><span class="line"># 参数说明</span><br><span class="line"># username：你将创建的用户名 这里是herobin</span><br><span class="line"># host：指定该用户在哪个主机上可以登录，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登录，可以使用通配符%</span><br><span class="line"># password：该用户的登录密码，密码可以为空，如果为空则该用户可以不需要密码登录服务器</span><br><span class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</span><br><span class="line">grant all privileges on *.* to &apos;herobin&apos;@&apos;%&apos;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/uploads/aliyun/201810241942001.png" alt=""></p><p>开启远程连接</p><p>通过阿里云控制台开放3306端口</p><p>在阿里云控制台咱们的实例页面下面选择安全组-&gt;配置规则<br><img src="/uploads/aliyun/201810191204001.png" alt=""></p><p>进入到规则配置页面之后，咱们可以看到目前只有22端口和3389端口支持远程访问，咱们还需要额外开通80端口（微信公众号用），3306端口(mysql)以及6379端口(redis)<br><img src="/uploads/aliyun/201810191404001.png" alt=""></p><p>之后便能在我们本地通过调用mysql指令远程登录阿里云服务器上的mysql server中，<br><code>mysql -uwork -P3306 -h47.104.1.235 –p</code> //本机远程登录mysql指令<br><img src="/uploads/aliyun/201810191408001.png" alt=""></p><p>注意这里踩了一下坑，在配置好后，我用本地MySQLWorkbench连接服务器数据库显示失败<br>Failed to Connect to MySQL at 101.132.138.185:3306 with user herobin<br>Authentication plugin ‘caching_sha2_password’ cannot be loaded: dlopen(/usr/local/mysql/lib/plugin/caching_sha2_password.so, 2): image not found</p><p>原因：密码加密方式【caching_sha2_password】，客户端不支持。<br>在数据库服务器上登录并修改登录方式：<br>ALTER USER ‘herobin‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’; </p><p>连上了哈哈哈哈哈哈。</p><h4 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h4><p>redis安装很简单，首先解压redis安装包</p><p><code>tar -zxvf redis-4.0.2.tar.gz</code></p><p>设置redis以支持远程登录</p><p><code>vi redis-4.0.2/redis.conf</code></p><p>将bind 127.0.0.1这句话用井号注释掉，这样就能支持远程连接了</p><p><img src="/uploads/aliyun/201810201451001.png" alt=""></p><p>此外，还需要给redis.conf添加配置以支持redis作为守护进程一直跑在后台需要加入<code>daemonize yes</code><br><img src="/uploads/aliyun/201810201451002.png" alt=""></p><p>安装redis</p><p>去到解压后的目录里</p><p><code>cd redis-4.0.2</code></p><p><code>make</code> //安装redis</p><p>启动redis服务</p><p><code>src/redis-server redis.conf</code></p><p>redis连接测试</p><p>通过redis-cli连接到redis服务器</p><p><code>src/redis-cli</code></p><p>当输入ping得到pong的回应之后，证明redis配置已经完成<br><img src="/uploads/aliyun/201810201451003.png" alt=""></p><h4 id="安装tomcat8"><a href="#安装tomcat8" class="headerlink" title="安装tomcat8"></a>安装tomcat8</h4><p>解压tomcat压缩包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.0.46.tar.gz</span><br></pre></td></tr></table></figure><p>启动tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apache-tomcat-8.0.46/bin/startup.sh</span><br></pre></td></tr></table></figure><p><img src="/upload/aliyun/201810232115001.png" alt=""></p><h3 id="1-在服务器上发布并运行自己的web-project"><a href="#1-在服务器上发布并运行自己的web-project" class="headerlink" title="1.在服务器上发布并运行自己的web project"></a>1.在服务器上发布并运行自己的web project</h3><p>修改tomcat默认启动端口，从8080修改为80端口，便于微信登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi apache-tomcat-8.0.46/conf/server.xml</span><br></pre></td></tr></table></figure><p><img src="/upload/aliyun/201810232115002.png" alt=""></p><p>重启tomcat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./apache-tomcat-8.0.46/bin/shutdown.sh</span><br><span class="line">./apache-tomcat-8.0.46/bin/startup.sh</span><br></pre></td></tr></table></figure><p>把项目里的mysql配置，redis配置（如果有的话）修改为阿里云服务器对应的配置（即ip，端口，密码等配置修改为服务器里安装好的这些软件的对应的配置）</p><p>打出自己项目的war包<br><code>export -&gt; war file</code></p><p>将export出来的war包上传到服务器tomcat的webapps目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp o2o.war root@101.132.138.185:/root/apache-tomcat-8.5.34/webapps</span><br></pre></td></tr></table></figure></p><p>这里要注意上面的命令是上传一个文件的方式，如果是上传目录（文件夹）会报错<br><code>not a regular file</code> 这时要加上<code>-r</code>就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r upload root@101.132.138.185:/root/shopImages</span><br></pre></td></tr></table></figure><p>上传成功后，没过几秒tomcat便会在webapps目录下自动从项目war包中解析出项目工程目录来，之后通过ip+请求路径的形式便能访问到自己的项目(因为已经设置成80端口)，这是http访问默认的端口，所以不需要在URL添加端口信息了。</p><p>此时输入<code>http://101.132.138.185/o2o/frontend/index</code>已经可以访问页面了</p><p>遗留问题：页面图片获取不到</p><p>图片问题找到了：<br>我们在前端访问服务器上的图片除了数据库中的图片路径还应该加上我们tomcat在服务器上部署的路径才能访问到目标路径。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阿里云部署&quot;&gt;&lt;a href=&quot;#阿里云部署&quot; class=&quot;headerlink&quot; title=&quot;阿里云部署&quot;&gt;&lt;/a&gt;阿里云部署&lt;/h1&gt;&lt;h2 id=&quot;阿里云服务器&quot;&gt;&lt;a href=&quot;#阿里云服务器&quot; class=&quot;headerlink&quot; title=&quot;阿
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="服务器" scheme="http://www.herobin.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>找工作的准备</title>
    <link href="http://www.herobin.top/2018/10/17/%E6%89%BE%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%87%86%E5%A4%87/"/>
    <id>http://www.herobin.top/2018/10/17/找工作的准备/</id>
    <published>2018-10-17T06:50:31.000Z</published>
    <updated>2019-01-11T05:43:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天问了下师兄找工作要做哪些准备，简单整理可以分为基础类和专业类两方面的准备：</p><p>基础类：</p><blockquote><ul><li>计算机网络</li><li>操作系统</li><li>数据结构（要刷题）</li></ul></blockquote><p>专业类(java)：</p><blockquote><ul><li>虚拟机(jvm) 要刷3-5遍</li><li>jdk底层源码，如ArrayList,HashMap…</li><li>Spring源码</li><li>MyBatis源码</li></ul></blockquote><p>时间已经比较紧迫了，还是要拼一波进大公司的，加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天问了下师兄找工作要做哪些准备，简单整理可以分为基础类和专业类两方面的准备：&lt;/p&gt;
&lt;p&gt;基础类：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;计算机网络&lt;/li&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;数据结构（要刷题）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockqu
      
    
    </summary>
    
      <category term="其他" scheme="http://www.herobin.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://www.herobin.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.herobin.top/2018/10/16/hello-world/"/>
    <id>http://www.herobin.top/2018/10/16/hello-world/</id>
    <published>2018-10-16T05:01:59.000Z</published>
    <updated>2019-01-11T05:44:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原始文档"><a href="#原始文档" class="headerlink" title="原始文档"></a>原始文档</h2><h3 id="啦啦啦啦啦啦"><a href="#啦啦啦啦啦啦" class="headerlink" title="啦啦啦啦啦啦"></a>啦啦啦啦啦啦</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: 嗯，留下了一点基础的命令，其他删掉了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原始文档&quot;&gt;&lt;a href=&quot;#原始文档&quot; class=&quot;headerlink&quot; title=&quot;原始文档&quot;&gt;&lt;/a&gt;原始文档&lt;/h2&gt;&lt;h3 id=&quot;啦啦啦啦啦啦&quot;&gt;&lt;a href=&quot;#啦啦啦啦啦啦&quot; class=&quot;headerlink&quot; title=&quot;啦啦啦啦啦
      
    
    </summary>
    
      <category term="其他" scheme="http://www.herobin.top/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://www.herobin.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>spring事务管理</title>
    <link href="http://www.herobin.top/2018/02/02/spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    <id>http://www.herobin.top/2018/02/02/spring事务管理/</id>
    <published>2018-02-02T04:45:29.000Z</published>
    <updated>2019-01-13T07:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是事务："><a href="#什么是事务：" class="headerlink" title="什么是事务："></a>什么是事务：</h3><p>事务指的是逻辑上的一组操作，这组操作要么全部成功，要么全部失败.（银行转账）</p><h4 id="事务的特性："><a href="#事务的特性：" class="headerlink" title="事务的特性："></a>事务的特性：</h4><p><strong>原子性 一致性 隔离性 持久性</strong></p><blockquote><ul><li>原子性：原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生</li></ul></blockquote><blockquote><ul><li>一致性：一致性指事务前后数据的完整性必须保持一致</li></ul></blockquote><blockquote><ul><li>隔离性：隔离性指多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之间数据要相互隔离</li></ul></blockquote><blockquote><ul><li>持久性：持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，即使数据库发生故障也不应该对其有任何影响</li></ul></blockquote><p><strong>Spring事务管理高层抽象主要包括3个接口</strong></p><blockquote><ul><li>PlatformTransactionManager：事务管理器</li><li>TransactionDefinition：事务定义信息（隔离、传播、超时、只读）</li><li>TransactionStatus：事务具体运行状态</li></ul></blockquote><p>Spring为不同的持久化框架提供了不同PlatformTransactionManager接口实现</p><p>DataSourceTransactionManager：使用Spring JDBC或iBatis进行持久化数据时使用</p><p>HibernateTransactionManager：使用Hibernate3.0版本进行持久化数据时使用</p><h3 id="Spring支持两种方式事务管理"><a href="#Spring支持两种方式事务管理" class="headerlink" title="Spring支持两种方式事务管理"></a>Spring支持两种方式事务管理</h3><blockquote><ul><li>编程式的事务管理:在实际应用中很少使用,通过TransactionTemplate手动管理事务</li><li>通过XML配置声明式事务:开发中推荐使用（代码侵入性最小）<br>  Spring的声明式事务是通过AOP实现的</li></ul></blockquote><h4 id="编程式的事务管理："><a href="#编程式的事务管理：" class="headerlink" title="编程式的事务管理："></a>编程式的事务管理：</h4><p>配置文件编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id = &quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionmanager&quot;&gt;</span><br><span class="line">    &lt;property name = &quot;dataSource&quot; ref = &quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置事务管理的模板：Spring为了简化事务管理的代码而提供的类 --&gt;</span><br><span class="line">&lt;bean id = &quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class="line">    &lt;property name = &quot;transactionManager&quot; ref = &quot;transactionManager&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>代码文件编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void transfer(final String out, final String in, final Double money)&#123;</span><br><span class="line">    transactionTemplate.execute(new TransactionCallbackWithoutResult)&#123;</span><br><span class="line">        @override</span><br><span class="line">        protected void doInTransactionWithoutResult(TransactionStatus transactionStatus)&#123;</span><br><span class="line">            accountDao.outMoney(out, money);</span><br><span class="line">            int i = i/0;//用于异常时检测事务完整性</span><br><span class="line">            accountDao.inMoney(in, money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明式的事务管理："><a href="#声明式的事务管理：" class="headerlink" title="声明式的事务管理："></a>声明式的事务管理：</h4><p>声明式事务管理方式一：TransactionProxyFactoryBean   （不常用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器： --&gt;</span><br><span class="line">&lt;bean id = &quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionmanager&quot;&gt;</span><br><span class="line">    &lt;property name = &quot;dataSource&quot; ref = &quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 配置业务层的代理： --&gt;</span><br><span class="line">&lt;bean id = &quot;acountServiceProxy&quot; class = &quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class="line">    &lt;!-- 配置目标对象 --&gt;</span><br><span class="line">    &lt;property name = &quot;target&quot; ref = &quot;accountService&quot;/&gt;</span><br><span class="line">    &lt;!-- 注入事务管理器 --&gt;</span><br><span class="line">    &lt;property name = &quot;transactionManager&quot; ref = &quot;transactionManager&quot;/&gt;    </span><br><span class="line">    &lt;!-- 注入事务属性 --&gt;</span><br><span class="line">    &lt;property name = &quot;transactionAttributes&quot;&gt;</span><br><span class="line">        &lt;props&gt;</span><br><span class="line">            &lt;!-- prop的格式：</span><br><span class="line">                        * PROPAGATION  ： 事务的传播行为</span><br><span class="line">                        * ISOLATION  ： 事务的隔离级别</span><br><span class="line">                        * readOnly  ： 只读（不可以进行修改，插入，删除）</span><br><span class="line">                        * -Exception  ： 发生哪些异常回滚事务</span><br><span class="line">                        * +Exception： 发生哪些异常不回滚</span><br><span class="line">             --&gt;</span><br><span class="line">            &lt;prop key=&quot;transfer&quot;&gt;PROPAGATION_REQUIRED,redaOnly,...&lt;/prop&gt;</span><br><span class="line">        &lt;/props&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>声明式事务管理方式二：基于AspectJ使用xml方式  基于tx/aop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id = &quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionmanager&quot;&gt;</span><br><span class="line">    &lt;property name = &quot;dataSource&quot; ref = &quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;tx:advice id = &quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;transfer&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut expression=&quot;execution(* cn.service.*Service.*(..))&quot; id=&quot;serviceMethod&quot;/&gt;</span><br><span class="line">    &lt;aop:advisor pointcut-ref=&quot;serviceMethod&quot; advice-ref=&quot;txAdvice&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p>声明式事务管理方式三：基于注解的事务管理</p><p>配置文件编写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">&lt;bean id = &quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionmanager&quot;&gt;</span><br><span class="line">    &lt;property name = &quot;dataSource&quot; ref = &quot;dataSource&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 开启注解事务 --&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;/&gt;</span><br><span class="line">使用的时候在需要事务的地方（通常是service层）加注解@Transactional</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是事务：&quot;&gt;&lt;a href=&quot;#什么是事务：&quot; class=&quot;headerlink&quot; title=&quot;什么是事务：&quot;&gt;&lt;/a&gt;什么是事务：&lt;/h3&gt;&lt;p&gt;事务指的是逻辑上的一组操作，这组操作要么全部成功，要么全部失败.（银行转账）&lt;/p&gt;
&lt;h4 id=&quot;事务的
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="spring" scheme="http://www.herobin.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>spring基础</title>
    <link href="http://www.herobin.top/2018/01/29/spring%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.herobin.top/2018/01/29/spring基础/</id>
    <published>2018-01-29T07:02:43.000Z</published>
    <updated>2019-01-13T07:44:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring：</strong>轻量级的控制反转（IOC）和面向切面（AOP）的容器框架.</p><blockquote><ul><li>-从大小与开销两方面而言Spring都是轻量的</li><li>-通过控制反转（IOC）的技术达到松耦合的目的</li><li>-提供了面向切面的编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务进行内聚性的开发</li><li>-包含并管理应用对象的配置和生命周期，这个意义上是一种容器</li><li>-将简单的组件配置、组合成为复杂的应用，这个意义上是框架</li></ul></blockquote><p><strong>IOC：</strong>控制反转，控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护</p><p><strong>DI（依赖注入）</strong>是其一种实现方式</p><p><strong>目的：</strong>创建对象并且组装对象之间的关系</p><p>控制被反转后，获得依赖对象的过程由自身管理变成了由IOC容器主动注入。</p><p><strong>注入方式：</strong></p><blockquote><ul><li>设值注入 （set） </li><li>构造注入</li></ul></blockquote><p><strong>bean的作用域：</strong></p><blockquote><ul><li>singleton：单例，指一个Bean容器中只存在一份</li><li>prototype：每次请求（每次使用）创建新的实例，destory方式不生效</li><li>request：每次http请求创建一个实例且仅在当前request内有效</li><li>session：同上，每次http请求创建，当前session内有效</li><li>global session：基于portlet的web中有效，如果是在web中，同session     </li></ul></blockquote><p><strong>bean的自动装配（Autowiring）</strong></p><blockquote><ul><li>No：不做任何操作</li><li>byname：根据属性名自动装配。此选项将检查容器并根据名字查找与属性完全一致的bean，并将其与属性自动装配</li><li>byType：如果容器中存在一个与指定属性类型相同的bean，那么将于该属性自动装配；如果存在过个该类型bean，那么抛出异常，并指出不能使用byType方式进行自动装配；如果没有找到相匹配的bean，则什么事都不发生</li><li>Constructor：与byType方式类似，不同之处在于它应用于构造器参数。如果容器中没有找到与构造器参数类型一致的bean，那么抛出异常</li></ul></blockquote><p><strong>注解：</strong></p><p>@configuration是一个通用注解，可用于任何bean</p><p>@Repository，@Service，@Controller是更有针对性的注解</p><blockquote><ul><li>@Repository通常用于注解Dao类，即持久层</li><li>@Service通常用于注解Service类，即服务层</li><li>@Controller通常用于Controller类，即控制层（MVC）</li></ul></blockquote><p>通常情况下自动查找的Spring组件，其scope是singleton，可以设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@scope(&quot;prototype&quot;)</span><br><span class="line">@Repository</span><br><span class="line">public class stuDao imp.........</span><br></pre></td></tr></table></figure><p><strong>@Required注解适用于bean属性的setter方法（不常用）</strong></p><p>这个注解仅仅表示，受影响的bean属性必须在配置时被填充，通过在bean定义或通过自动装配一个明确的属性值</p><p><strong>@Autowired：</strong>“传统”的setter方法。这种自动注入，既可以用在setter方法上，也可以用在成员变量和构造器上。用在成员变量的话那么就不需要定义setter方法了。</p><p>默认情况下，如果因找不到合适的bean将会导致autowired失败抛出异常，可以通过下面的方式避免</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private class UserService&#123;</span><br><span class="line">    private UserDao userDao;</span><br><span class="line">    @Autowired(required=false)</span><br><span class="line">    public void setUserDao(UserDao userDao)&#123;</span><br><span class="line">        this.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用Spring框架中@Autowired标签时默认情况下使用 @Autowired 注释进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。当找不到一个匹配的 Bean 时，Spring 容器将抛出BeanCreationException 异常，并指出必须至少拥有一个匹配的 Bean。Spring 允许我们通过 @Qualifier 注释指定注入 Bean 的名称，这样歧义就消除了，可以通过下面的方法解决异常。</p><p>@Qualifier(“XXX”) 中的 XX是 Bean 的名称，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了。@Autowired 可以对成员变量、方法以及构造函数进行注释，而 @Qualifier 的标注对象是成员变量、方法入参、构造函数入参</p><p><strong>基于java的容器注解</strong><br><code>@Bean</code>标识一个用于配置和初始化一个由<code>SpringIoC</code>容器管理的新对象的方法，类似于XML配置文件的<code>&lt;bean/&gt;</code></p><p>可以在<code>Spring</code>的<code>@Component</code>注解的类中使用<code>@Bean</code>注解任何方法（仅仅是可以）</p><p>上一点中，通常使用的是<code>@Configuration</code>.</p><p><code>@Bean</code>中可以有可选项<code>name，initMethod，destoryMethod</code>等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class StoreConfig&#123;</span><br><span class="line">    @Bean(name = &quot;store&quot;,initMethod = &quot;&quot;,destoryMethod = &quot;&quot;)</span><br><span class="line">    public Store stringStore()&#123;</span><br><span class="line">        return new StringStore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>applicationContext.xml</code>中配置数据库文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入外部属性文件 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;</span><br><span class="line">    &lt;!-- 配置C3P0连接池: --&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">@Resource(name = &quot;&quot;)</span><br><span class="line">public void setStudent(Student student)&#123;</span><br><span class="line">    this.student = student;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有显式的指定<code>@Resource</code>的<code>name</code>，默认的名称是从属性名或者<code>setter</code>方法得出.</p><p><strong>AOP：</strong>Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术</p><p>主要的功能是：</p><blockquote><ul><li>日志记录</li><li>性能统计</li><li>安全控制</li><li>事务处理</li><li>异常处理等等</li></ul></blockquote><p>AOP实现方式</p><blockquote><ul><li>预编译：AspectJ</li><li>运行期动态代理（JDK动态代理、CGLib动态代理）：SpringAOP、JbossAOP</li></ul></blockquote><p><strong>AOP几个相关概念：</strong></p><blockquote><ul><li>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象</li><li>连接点（Joinpoint）：程序执行过程中的某个特定的点</li><li>通知（Advice）：在切面的某个特定的连接点上执行的动作</li><li>切入点（Pointcut）：匹配连接点的断言，在AOP中通知和一个切入点表达式关联</li><li>引入（Introduction）：在不修改类代码的前提下，为类添加新的方法和属性</li><li>目标对象（Target Object）：被一个或者多个切面所通知的对象</li><li>AOP代理（AOP Proxy）：AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）</li><li>织入（Weaving）：把切面连接到其他的应用程序类型或者对象上，并创建一个被通知的对象，分为：编译时织入、类加载时织入、执行时织入</li></ul></blockquote><p><strong>Advice的类型：</strong></p><blockquote><ul><li>前置通知（Before Advice）：在某连接点（join point）之前执行的通知，但不能阻止连接点前的执行（除非他抛出一个异常）</li><li>返回后通知（After returning advice）：在某连接点（join point）正常完成后执行的通知</li><li>抛出异常后通知（After throwing advice）：在方法抛出异常退出时执行的通知</li><li>后通知（After（finally）advice）：当某连接点退出的时候执行的通知（不论是正常返回还是异常返回）</li><li>环绕通知（Around Advice）：包围一个连接点（join point）的通知</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:aspect id=&quot;testAspectAOP&quot; ref=&quot;testAspect&quot;&gt;</span><br><span class="line">            &lt;aop:pointcut id=&quot;testService&quot; expression=&quot;execution(* com.service..(..))&quot; id=&quot;p1&quot;/&gt;</span><br><span class="line">            &lt;aop:before method=&quot;before&quot; point-ref=&quot;p1&quot;/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p><strong>Spring的AOP实现</strong><br>纯java实现，无需特殊的编译过程，不需要控制类加载器层次</p><p>目前只支持方法执行连接点（通知Spring Bean的方法执行）</p><p>不是为了提供最完整的AOP实现；而是侧重于提供一种AOP实现和Spring IoC容器之间的整合，用于帮助解决企业应用中的常见问题</p><p><strong>Schema——based AOP</strong><br>Spring所有的切面和通知器都必须放在一个<code>&lt;aop:config&gt;</code>内（可以配置包含多个<code>&lt;aop:config&gt;</code>元素），每一个<code>&lt;aop:config&gt;</code>可以包含<code>pointcut</code>，<code>advisor</code>和<code>aspect</code>元素（他们必须按照这个顺序进行声明）</p><p><code>&lt;aop:config&gt;</code>风格的配置大量使用了<code>Spring</code>的自动代理机制</p><p><strong>配置切面aspect</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;testAspect&quot; class=&quot;com.imooc.aop.schema.advice.TestAspect&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:aspect id=&quot;testAspectAOP&quot; ref=&quot;testAspect&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p><strong>切入点（pointcut）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">execution(public * *(..))：切入点为执行所有public方法时</span><br><span class="line">execution(* set*(..))：切入点为执行所有set开始的方法时</span><br><span class="line">execution(* com.service.AccountService.*(..))：切入点为执行AccountService类中的所有方法时</span><br><span class="line">execution(* com.service..(..))：切入点为执行com.service包下的所有方法时</span><br><span class="line">execution(* com.service...(..))：切入点为执行com.service包及其子包下的所有方法时</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:aspect id=&quot;testAspectAOP&quot; ref=&quot;testAspect&quot;&gt;</span><br><span class="line">            &lt;aop:pointcut id=&quot;testService&quot; expression=&quot;execution(* com.service..(..))&quot; id=&quot;p1&quot;/&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><p><strong>Introductions</strong><br>简介允许一个切面声明一个实现指定接口的通知对象，并且提供了一个接口实现类来代替这些对象</p><p>由<code>&lt;aop:aspect&gt;</code>中的<code>&lt;aop:declare-parents&gt;</code>元素声明该元素用于声明所匹配的类型拥有一个新的parent</p><p>advisor就像一个小的自包含的方面，只有一个advice</p><p>切面自身通过一个bean表示，而且必须实现某个advice接口，同时，advisor也可以很好的利用AspectJ的切入点表达式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Spring：&lt;/strong&gt;轻量级的控制反转（IOC）和面向切面（AOP）的容器框架.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;-从大小与开销两方面而言Spring都是轻量的&lt;/li&gt;
&lt;li&gt;-通过控制反转（IOC）的技术达到松耦合的目的&lt;
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="spring" scheme="http://www.herobin.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>java多线程之内存可见性</title>
    <link href="http://www.herobin.top/2018/01/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7/"/>
    <id>http://www.herobin.top/2018/01/04/java多线程之内存可见性/</id>
    <published>2018-01-04T03:33:46.000Z</published>
    <updated>2019-01-13T03:58:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p><strong>可见性：</strong>一个线程对共享变量值的修改，能够及时地被其他线程看到。</p><p><strong>共享变量：</strong>如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量</p><h3 id="Java内存模型（JMM）"><a href="#Java内存模型（JMM）" class="headerlink" title="Java内存模型（JMM）"></a>Java内存模型（JMM）</h3><p>Java内存模型（Java Memory Model）描述了Java程序中各种变量（线程共享变量）的访问规则，以及在JVM中将变量存储到内存和从内存中读取出变量这样的底层细节。</p><p>所有的变量都存储在主内存中。</p><p>每个线程都有自己独立的工作内存，里面保存该线程使用到的变量的副本。（主内存中该变量的一份拷贝）</p><p><img src="/uploads/180104java1/1.png" alt=""></p><h3 id="两条规定"><a href="#两条规定" class="headerlink" title="两条规定"></a>两条规定</h3><blockquote><ul><li>线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写。</li></ul></blockquote><blockquote><ul><li>不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成。</li></ul></blockquote><p><img src="/uploads/180104java1/2.png" alt=""></p><p>要实现共享变量的可见性，必须保证两点：</p><blockquote><ul><li>线程修改后的共享变量值能够及时从工作内存刷新到主内存中。</li><li>其他线程能够及时把共享变量的最新值从主内存更新到自己的工作内存中</li></ul></blockquote><h3 id="Java语言层次支持的可见性实现方式："><a href="#Java语言层次支持的可见性实现方式：" class="headerlink" title="Java语言层次支持的可见性实现方式："></a>Java语言层次支持的可见性实现方式：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    synchronized</span><br><span class="line">    volatile</span><br></pre></td></tr></table></figure><p><strong>synchronized能够实现：</strong></p><p>原子性（同步）</p><p>可见性</p><p>JMM关于synchronized的两条规定：</p><blockquote><ul><li>线程解锁前，必须把共享变量的最新值刷新到主内存中。</li><li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值<pre><code>（注意：加锁和解锁需要是同一把锁）</code></pre></li></ul></blockquote><p>线程解锁前对共享变量的修改在下次加锁时对其他线程可见</p><p><img src="/uploads/180104java1/3.png" alt="">           </p><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p><strong>重排序：</strong>代码书写的顺序与实际执行的顺序不同，指令重排序是编译器或处理器为了提高程序性能而做的优化</p><blockquote><ul><li>1.编译器优化的重排序（编译器优化）</li><li>2.指令级并行重排序（处理器优化）</li><li>3.内存系统的重排序（处理器优化）</li></ul></blockquote><p>as-if-serial：无论如何重排序，程序执行的结果应该与代码顺序执行的结果一致（Java编译器、运行时和处理器都会保证Java在单线程下遵循as-if-serial语义）</p><p><img src="/uploads/180104java1/4.png" alt=""></p><h3 id="可见性分析"><a href="#可见性分析" class="headerlink" title="可见性分析"></a>可见性分析</h3><p>导致共享变量在线程间不可见的原因：      synchronized解决方案</p><blockquote><ul><li>1.线程的交叉执行       ——&gt;   原子性</li><li>2.重排序结合线程交叉执行       ——&gt;   原子性</li><li>3.共享变量更新后的值没有在工作内存与主内存间及时更新    ——&gt;   可见性</li></ul></blockquote><h3 id="volatile实现可见性"><a href="#volatile实现可见性" class="headerlink" title="volatile实现可见性"></a>volatile实现可见性</h3><p>volatile如何实现内存可见性：</p><blockquote><ul><li>深入来说：通过加入内存屏障和禁止重排序优化来实现的。</li><li>对volatile变量执行写操作时，会在写操作后加入一条store屏障指令。</li><li>对volatile变量执行读操作时，会在读操作前加入一条load屏障指令。</li></ul></blockquote><h3 id="volatile如何实现内存可见性："><a href="#volatile如何实现内存可见性：" class="headerlink" title="volatile如何实现内存可见性："></a>volatile如何实现内存可见性：</h3><p>通俗的讲：volatile变量在每次被线程访问时，都强迫从主内存中重读该变量的值，而当该变量发生变化时，又会强迫线程将最新的值刷新到主内存。这样任何时刻，不同的线程总能看到该变量的最新值。</p><h4 id="线程写volatile变量的过程："><a href="#线程写volatile变量的过程：" class="headerlink" title="线程写volatile变量的过程："></a>线程写volatile变量的过程：</h4><blockquote><ul><li>1.改变线程工作内存中volatile变量副本的值。</li><li>2.将改变后的副本的值从工作内存刷新到主内存。</li></ul></blockquote><h4 id="线程读volatile变量的过程："><a href="#线程读volatile变量的过程：" class="headerlink" title="线程读volatile变量的过程："></a>线程读volatile变量的过程：</h4><blockquote><ul><li>1.从主内存中读取volatile变量的最新值到线程的工作内存中。</li><li>2.从工作内存中读取volatile变量的副本。</li></ul></blockquote><p>volatile不能保证volatile变量复合操作的原子性</p><p><img src="/uploads/180104java1/5.png" alt=""></p><p><img src="/uploads/180104java1/6.png" alt=""></p><p>在多进程（线程）的操作系统中不能被其它进程（线程）打断的操作就叫原子操作，文件的原子操作是指操作文件时的不能被打断的操作。原子操作是不可分割的，在执行过程中不会被任何其它任务或事件中断。</p><p>回滚就是回到事务开始之前的状态</p><p>我们把这种要么一起成功（A帐户成功减少1000，同时B帐户成功增加1000），要么一起失败（A帐户回到原来状态，B帐户也回到原来状态）的操作叫原子性操作。</p><p>如果把一个事务可看作是一个程序,它要么完整的被执行,要么完全不执行。这种特性就叫原子性</p><p><img src="/uploads/180104java1/7.png" alt=""></p><p><img src="/uploads/180104java1/8.png" alt=""></p><p><img src="/uploads/180104java1/9.png" alt=""></p><p><img src="/uploads/180104java1/10.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可见性&quot;&gt;&lt;a href=&quot;#可见性&quot; class=&quot;headerlink&quot; title=&quot;可见性&quot;&gt;&lt;/a&gt;可见性&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;可见性：&lt;/strong&gt;一个线程对共享变量值的修改，能够及时地被其他线程看到。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;共享
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>mysql存储过程</title>
    <link href="http://www.herobin.top/2017/12/13/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://www.herobin.top/2017/12/13/mysql存储过程/</id>
    <published>2017-12-13T11:19:47.000Z</published>
    <updated>2019-01-12T11:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/20171213mysql/1.png" alt=""></p><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4><p>存储过程是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理。</p><h4 id="存储过程的优点"><a href="#存储过程的优点" class="headerlink" title="存储过程的优点"></a>存储过程的优点</h4><blockquote><ul><li>增强SQL语句的功能和灵活性</li><li>实现较快的执行速度</li><li>减少网络流量</li></ul></blockquote><p><img src="/uploads/20171213mysql/2.png" alt=""></p><blockquote><ul><li>IN：表示该参数的值必须在调用存储过程时指定</li><li>OUT：表示该参数的值可以被存储过程改变，并且可以返回。</li><li>INOUT：表示该参数的调用时指定，并且可以被改变和返回。</li></ul></blockquote><p><img src="/uploads/20171213mysql/3.png" alt=""></p><p><img src="/uploads/20171213mysql/4.png" alt=""></p><h4 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h4><p>MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就成为存储引擎。</p><p>每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能。</p><p><img src="/uploads/20171213mysql/5.png" alt=""></p><h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><p>当多个连接对记录进行修改时保证数据的一致性和完整性。</p><p><img src="/uploads/20171213mysql/6.png" alt=""></p><p><img src="/uploads/20171213mysql/7.png" alt=""></p><h4 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h4><p><img src="/uploads/20171213mysql/8.png" alt=""></p><p><img src="/uploads/20171213mysql/9.png" alt=""></p><p>外键：是保证数据一致性的策略。</p><p>索引：是对数据表中一列或多列的值进行排序的一种结构。</p><p><img src="/uploads/20171213mysql/10.png" alt=""></p><p><img src="/uploads/20171213mysql/11.png" alt=""></p><p><img src="/uploads/20171213mysql/12.png" alt=""></p><p><img src="/uploads/20171213mysql/13.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/uploads/20171213mysql/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;存储过程&quot;&gt;&lt;a href=&quot;#存储过程&quot; class=&quot;headerlink&quot; title=&quot;存储过程&quot;&gt;&lt;/a&gt;存储过程&lt;/h4&gt;&lt;p&gt;存储过程是SQ
      
    
    </summary>
    
      <category term="数据库" scheme="http://www.herobin.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="http://www.herobin.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="http://www.herobin.top/tags/mysql/"/>
    
  </entry>
  
</feed>
