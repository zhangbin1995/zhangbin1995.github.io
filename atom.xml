<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeroBin&#39;s Blog</title>
  
  <subtitle>向阳而生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.herobin.top/"/>
  <updated>2019-05-19T12:14:44.488Z</updated>
  <id>http://www.herobin.top/</id>
  
  <author>
    <name>HeroBin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot启动流程</title>
    <link href="http://www.herobin.top/2019/05/19/SpringBoot%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://www.herobin.top/2019/05/19/SpringBoot启动流程/</id>
    <published>2019-05-19T12:07:13.000Z</published>
    <updated>2019-05-19T12:14:44.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot启动流程"><a href="#Spring-Boot启动流程" class="headerlink" title="Spring Boot启动流程"></a>Spring Boot启动流程</h1><p>springboot的自动配置为我们带来了方便快捷的开发体验，那么它的启动流程是怎样的呢？这里我们就来了解一下SpringBoot内部启动原理。</p><p>首先来看SpringBoot的启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就有SpringBoot启动关键的两个部分</p><ul><li>@SpringBootApplication</li><li>SpringApplication.run</li></ul><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>点进@SpringBootApplication注解查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.TypeExcludeFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.FilterType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan.Filter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class,</span><br><span class="line">        attribute = <span class="string">"exclude"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = EnableAutoConfiguration.class,</span><br><span class="line">        attribute = <span class="string">"excludeName"</span></span><br><span class="line">    )</span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackages"</span></span><br><span class="line">    )</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = ComponentScan.class,</span><br><span class="line">        attribute = <span class="string">"basePackageClasses"</span></span><br><span class="line">    )</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然定义使用了多个Annotation进行了原信息标注，但实际重要的只有三个Annotation：</p><ul><li>@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，还是使用一个<code>@SpringBootApplication</code>更加方便快捷。</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>这里的@Configuration就是JavaConfig形式的Spring Ioc容器的配置类使用的那个@Configuration，SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类。</p><h3 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h3><p>@ComponentScan这个注解在Spring中很重要，它对应XML配置中的元素，@ComponentScan的功能其实就是自动扫描并加载符合条件的组件（比如@Component和@Repository等）或者bean定义，最终将这些bean定义加载到IoC容器中。</p><p>我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明@ComponentScan所在类的package进行扫描。</p><blockquote><p>注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。</p></blockquote><h3 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h3><p>个人感觉@EnableAutoConfiguration这个Annotation最为重要，所以放在最后来解读，大家是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，借助@Import的支持，收集和注册特定场景相关的bean定义。<br>@EnableScheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。<br>@EnableMBeanExport是通过@Import将JMX相关的bean定义加载到IoC容器。<br>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！<br>@EnableAutoConfiguration作为一个复合Annotation,其自身定义关键信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;EnableAutoConfigurationImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。<br>借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！</p><p>自动配置幕后英雄：SpringFactoriesLoader详解<br>SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.core.io.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AnnotationAwareOrderComparator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ClassUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ReflectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFactoriesLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(SpringFactoriesLoader.class);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringFactoriesLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadFactories</span><span class="params">(Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(factoryClass, <span class="string">"'factoryClass' must not be null"</span>);</span><br><span class="line">        ClassLoader classLoaderToUse = classLoader;</span><br><span class="line">        <span class="keyword">if</span>(classLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; factoryNames = loadFactoryNames(factoryClass, classLoaderToUse);</span><br><span class="line">        <span class="keyword">if</span>(logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Loaded ["</span> + factoryClass.getName() + <span class="string">"] names: "</span> + factoryNames);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;T&gt; result = <span class="keyword">new</span> ArrayList(factoryNames.size());</span><br><span class="line">        Iterator var5 = factoryNames.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            String factoryName = (String)var5.next();</span><br><span class="line">            result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AnnotationAwareOrderComparator.sort(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        String factoryClassName = factoryClass.getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span>?classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>):ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">            ArrayList result = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                URL url = (URL)urls.nextElement();</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</span><br><span class="line">                String factoryClassNames = properties.getProperty(factoryClassName);</span><br><span class="line">                result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load ["</span> + factoryClass.getName() + <span class="string">"] factories from location ["</span> + <span class="string">"META-INF/spring.factories"</span> + <span class="string">"]"</span>, var8);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">instantiateFactory</span><span class="params">(String instanceClassName, Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; instanceClass = ClassUtils.forName(instanceClassName, classLoader);</span><br><span class="line">            <span class="keyword">if</span>(!factoryClass.isAssignableFrom(instanceClass)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Class ["</span> + instanceClassName + <span class="string">"] is not assignable to ["</span> + factoryClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(<span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">                ReflectionUtils.makeAccessible(constructor);</span><br><span class="line">                <span class="keyword">return</span> constructor.newInstance(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to instantiate factory class: "</span> + factoryClass.getName(), var5);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名org.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key,获取对应的一组@Configuration类</p><p>上图就是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。<br>所以，@EnableAutoConfiguration自动配置的魔法骑士就变成了：从classpath中搜寻所有的META-INF/spring.factories配置文件，并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。</p><h2 id="深入探索SpringApplication执行流程"><a href="#深入探索SpringApplication执行流程" class="headerlink" title="深入探索SpringApplication执行流程"></a>深入探索SpringApplication执行流程</h2><p>SpringApplication的run方法的实现是我们本次旅程的主要线路，该方法的主要流程大体可以归纳如下：</p><ol><li><p>如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例方法。在SpringApplication实例初始化的时候，它会提前做几件事情：<br>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型。<br>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。<br>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。<br>推断并设置main方法的定义类。</p></li><li><p>SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener。调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。</p></li><li><p>创建并配置当前Spring Boot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。</p></li><li>遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉他们：“当前SpringBoot应用使用的Environment准备好了咯！”。</li><li>如果SpringApplication的showBanner属性被设置为true，则打印banner。</li><li>根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</li><li>ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize（applicationContext）方法来对已经创建好的ApplicationContext进行进一步的处理。</li><li>遍历调用所有SpringApplicationRunListener的contextPrepared()方法。</li><li>最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</li><li>遍历调用所有SpringApplicationRunListener的contextLoaded()方法。</li><li>调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。</li><li>查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。</li><li>正常情况下，遍历执行SpringApplicationRunListener的finished()方法、（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）<br>去除事件通知点后，整个流程如下：</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，SpringBoot的核心组件完成了基本的解析，综合来看，大部分都是Spring框架背后的一些概念和实践方式，SpringBoot只是在这些概念和实践上对特定的场景事先进行了固化和升华，而也恰恰是这些固化让我们开发基于Sping框架的应用更加方便高效。</p><p><a href="http://tengj.top/2017/03/09/springboot3/" target="_blank" rel="noopener">http://tengj.top/2017/03/09/springboot3/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot启动流程&quot;&gt;&lt;a href=&quot;#Spring-Boot启动流程&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot启动流程&quot;&gt;&lt;/a&gt;Spring Boot启动流程&lt;/h1&gt;&lt;p&gt;springboot的自动配置为我们
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Profile 多环境配置</title>
    <link href="http://www.herobin.top/2019/05/19/SpringBootProfile%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.herobin.top/2019/05/19/SpringBootProfile多环境配置/</id>
    <published>2019-05-19T11:57:56.000Z</published>
    <updated>2019-05-19T12:00:42.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Profile-多环境配置"><a href="#SpringBoot-Profile-多环境配置" class="headerlink" title="SpringBoot Profile 多环境配置"></a>SpringBoot Profile 多环境配置</h1><p>应用程序通常需要在多环境下运行，如开发环境，测试环境，生产环境，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为<code>WARN</code>或更高级别，并将日志写入日志文件，而开发的时候需要日志级别为<code>DEBUG</code>，日志输出到控制台即可。</p><p>这就需要我们每次在不用的环境下部署时都要修改对应的配置，SpringBoot的Profile提供了多环境配置帮我们将更换环境配置变得简单。</p><p>在<code>Spring Boot</code>中多环境配置文件名需要满足<code>application-{profile}.properties/yml</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如：</p><ul><li><p><code>application-dev.properties/application-dev.yml</code>：开发环境</p></li><li><p><code>application-prod.properties/application-prod.yml</code>：生产环境</p></li><li><code>application-test.properties/application-test.yml</code>：测试环境</li></ul><p>想要使用对应的环境，只需要在<code>application.properties/application.yml</code>中使用<code>spring.profiles.active</code>属性来设置，值对应上面提到的<code>{profile}</code>，这里就是指<code>dev</code>、<code>prod</code>、和<code>test</code>这三个。</p><p>给不同的环境添加不同的端口属性<code>server.port</code>，然后根据指定不同的<code>spring.profiles.active</code>来切换使用。</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0519-01/1.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot-Profile-多环境配置&quot;&gt;&lt;a href=&quot;#SpringBoot-Profile-多环境配置&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot Profile 多环境配置&quot;&gt;&lt;/a&gt;SpringBoot Pro
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>idea java类文件左下角出现红色的J标识解决办法</title>
    <link href="http://www.herobin.top/2019/05/19/java%E7%B1%BB%E6%96%87%E4%BB%B6%E5%B7%A6%E4%B8%8B%E8%A7%92%E5%87%BA%E7%8E%B0%E7%BA%A2%E8%89%B2%E7%9A%84J%E6%A0%87%E8%AF%86%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://www.herobin.top/2019/05/19/java类文件左下角出现红色的J标识解决办法/</id>
    <published>2019-05-19T11:52:37.000Z</published>
    <updated>2019-05-19T11:56:02.181Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA java类文件左下角出现红色的J标识,且方法无法执行,考虑应该是未编译的结果.如图:<br><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0519-01/1.png" alt="在这里插入图片描述"></p><p>解决办法：</p><p>File&gt;&gt;project structure&gt;&gt;Modules</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0519-01/2.png" alt="在这里插入图片描述"></p><p>在项目或src路径上标识Sources，问题解决。</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0519-01/3.png" alt="在这里插入图片描述"></p><p>原文博客：<a href="https://blog.csdn.net/jielinku29/article/details/79678467" target="_blank" rel="noopener">https://blog.csdn.net/jielinku29/article/details/79678467</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IDEA java类文件左下角出现红色的J标识,且方法无法执行,考虑应该是未编译的结果.如图:&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0
      
    
    </summary>
    
      <category term="报错" scheme="http://www.herobin.top/categories/%E6%8A%A5%E9%94%99/"/>
    
    
      <category term="报错" scheme="http://www.herobin.top/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ整合SpringBoot2.x</title>
    <link href="http://www.herobin.top/2019/05/17/RabbitMQ%E6%95%B4%E5%90%88SpringBoot2-x/"/>
    <id>http://www.herobin.top/2019/05/17/RabbitMQ整合SpringBoot2-x/</id>
    <published>2019-05-17T15:24:15.000Z</published>
    <updated>2019-05-17T15:28:58.226Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot与RabbitMQ集成非常简单，不需要做任何的额外设置，只需要两步即可：</p><ul><li>step1：引入相关依赖</li><li>step2：对application.properties进行配置</li></ul><p>首先新建两个项目一个生产者producer一个消费者consumer，项目结构分别如图</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-03/1.png" alt=""></p><p>这里只做简单的demo演示，所以只用到三个类，实体类Order，消息发送类OrderSender，消息接收类OrderReceiver。</p><h1 id="producer配置编写"><a href="#producer配置编写" class="headerlink" title="producer配置编写"></a>producer配置编写</h1><h2 id="在pom中都引入需要用到的依赖"><a href="#在pom中都引入需要用到的依赖" class="headerlink" title="在pom中都引入需要用到的依赖"></a>在pom中都引入需要用到的依赖</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- rabbitmq依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 工具类依赖包 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.26&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置producer的application-properties："><a href="#配置producer的application-properties：" class="headerlink" title="配置producer的application.properties："></a>配置producer的application.properties：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># springboot整合rabbitmq基本配置：</span><br><span class="line">spring.rabbitmq.addresses=<span class="number">127.0</span>.0.1:<span class="number">5672</span></span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line">spring.rabbitmq.connection-timeout=<span class="number">15000</span></span><br><span class="line"></span><br><span class="line">server.servlet.context-path=/</span><br><span class="line">server.port=<span class="number">8001</span></span><br></pre></td></tr></table></figure><h2 id="新建好订单实体类Order"><a href="#新建好订单实体类Order" class="headerlink" title="新建好订单实体类Order"></a>新建好订单实体类Order</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.herobin.springboot.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8763696299123564381L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String messageId; <span class="comment">//存储消息发送的唯一标识</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String id, String name, String messageId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.messageId = messageId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessageId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> messageId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageId</span><span class="params">(String messageId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.messageId = messageId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在producer包下新建一个订单消息发送类OrderSender"><a href="#在producer包下新建一个订单消息发送类OrderSender" class="headerlink" title="在producer包下新建一个订单消息发送类OrderSender"></a>在producer包下新建一个订单消息发送类OrderSender</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.herobin.springboot.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.connection.CorrelationData;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.herobin.springboot.entity.Order;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendOrder</span><span class="params">(Order order)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置消息的唯一id</span></span><br><span class="line">CorrelationData correlationData = <span class="keyword">new</span> CorrelationData();</span><br><span class="line">correlationData.setId(order.getMessageId());</span><br><span class="line"><span class="comment">// 这里我们传送的exchange为order-exchange，记得要去RabbitMQ的控制台创建好 配置好喝队列的绑定关系</span></span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">"order-exchange"</span>, <span class="comment">//exchange</span></span><br><span class="line"><span class="string">"order.abcd"</span>, <span class="comment">//routingKey </span></span><br><span class="line">order, <span class="comment">//object 消息体内容</span></span><br><span class="line">correlationData ); <span class="comment">//correlationData 消息唯一id</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在控制台创建好我们要用的exchange交换机和queue队列并绑定"><a href="#在控制台创建好我们要用的exchange交换机和queue队列并绑定" class="headerlink" title="在控制台创建好我们要用的exchange交换机和queue队列并绑定"></a>在控制台创建好我们要用的exchange交换机和queue队列并绑定</h2><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-03/2.png" alt="在这里插入图片描述"></p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-03/3.png" alt="在这里插入图片描述"></p><p>点击我们的交换机与我们队列绑定</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-03/4.png" alt="在这里插入图片描述"></p><p>这里<code>.#</code> 和<code>.*</code>是有区别的，前者<code>.#</code>适用与各种配置场景（多点），如order.a.b.c，而后者<code>.*</code>只能配置一个点的，如order.a，order.abc，无法识别order.abc.def这种两个点的场景。</p><p>现在我们可以去测试方法里进行测试了</p><p>启动测试，测试成功。</p><p>去控制台queue队列下我们可以看到已经有了一条队列</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-03/5.png" alt="在这里插入图片描述"></p><p>说明我们的消息队列发送（生产消息）成功。</p><h1 id="consumer配置编写"><a href="#consumer配置编写" class="headerlink" title="consumer配置编写"></a>consumer配置编写</h1><h2 id="pom和application-properties配置"><a href="#pom和application-properties配置" class="headerlink" title="pom和application.properties配置"></a>pom和application.properties配置</h2><p>consumer的pom用到的和producer都是一样的，application.properties只要将端口号变更一下，再加入消费端的配置就好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># springboot整合rabbitmq基本配置 </span><br><span class="line">spring.rabbitmq.addresses=<span class="number">127.0</span>.0.1:<span class="number">5672</span></span><br><span class="line">spring.rabbitmq.username=guest</span><br><span class="line">spring.rabbitmq.password=guest</span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line">spring.rabbitmq.connection-timeout=<span class="number">15000</span></span><br><span class="line"></span><br><span class="line"># springboot整合rabbitmq消费端配置</span><br><span class="line">spring.rabbitmq.listener.simple.concurrency=<span class="number">5</span></span><br><span class="line">spring.rabbitmq.listener.simple.max-concurrency=<span class="number">10</span></span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span><br><span class="line">spring.rabbitmq.listener.simple.prefetch=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">server.servlet.context-path=/</span><br><span class="line">server.port=<span class="number">8002</span></span><br></pre></td></tr></table></figure><h2 id="在消费端的entity下也新建好Order实体类"><a href="#在消费端的entity下也新建好Order实体类" class="headerlink" title="在消费端的entity下也新建好Order实体类"></a>在消费端的entity下也新建好Order实体类</h2><h2 id="编写消费消息类OrderReceiver"><a href="#编写消费消息类OrderReceiver" class="headerlink" title="编写消费消息类OrderReceiver"></a>编写消费消息类OrderReceiver</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.herobin.springboot.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Exchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.QueueBinding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.support.AmqpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Headers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.herobin.springboot.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">value = <span class="meta">@Queue</span>(value = <span class="string">"order-queue"</span>, durable = <span class="string">"true"</span>),</span><br><span class="line">exchange = <span class="meta">@Exchange</span>(name = <span class="string">"order-exchange"</span>, durable = <span class="string">"true"</span>, type = <span class="string">"topic"</span>),</span><br><span class="line">key = <span class="string">"order.*"</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="meta">@RabbitHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOrderMessage</span><span class="params">(@Payload Order order,</span></span></span><br><span class="line"><span class="function"><span class="params">@Headers Map&lt;String, Object&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">Channel channel)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// 消费者操作</span></span><br><span class="line">System.err.println(<span class="string">"----------收到消息，开始消费----------"</span>);</span><br><span class="line">System.err.println(<span class="string">"订单ID："</span> + order.getId());</span><br><span class="line">Long deliveryTag = (Long)headers.get(AmqpHeaders.DELIVERY_TAG);</span><br><span class="line"><span class="comment">// ACK 确认签收消息</span></span><br><span class="line">channel.basicAck(deliveryTag, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>@RabbitListener</code>是非常强大的即使我们没有在控制台创建order-exchange和order-queue在执行了启动类之后也会帮我们自动创建好。</p><p>启动我们的consumer程序，清空控制台（方便直观显示消息信息），再去启动producer的测试方法发送消息</p><p>回到consumer的console发现输出了消息</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-03/6.png" alt="在这里插入图片描述"></p><p>至此，实现了rabbitmq整合springboot简单的消息发送与接收。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot与RabbitMQ集成非常简单，不需要做任何的额外设置，只需要两步即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;step1：引入相关依赖&lt;/li&gt;
&lt;li&gt;step2：对application.properties进行配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先新建两个项
      
    
    </summary>
    
      <category term="MQ" scheme="http://www.herobin.top/categories/MQ/"/>
    
    
      <category term="MQ" scheme="http://www.herobin.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>mac安装启动RabbitMQ</title>
    <link href="http://www.herobin.top/2019/05/17/mac%E5%AE%89%E8%A3%85%E5%90%AF%E5%8A%A8RabbitMQ/"/>
    <id>http://www.herobin.top/2019/05/17/mac安装启动RabbitMQ/</id>
    <published>2019-05-17T15:20:44.000Z</published>
    <updated>2019-05-17T15:22:11.129Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_24095055/article/details/88993147" target="_blank" rel="noopener">mac安装启动RabbitMQ</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_24095055/article/details/88993147&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mac安装启动RabbitMQ&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="MQ" scheme="http://www.herobin.top/categories/MQ/"/>
    
    
      <category term="MQ" scheme="http://www.herobin.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>Mac下ActiveMQ的下载与安装</title>
    <link href="http://www.herobin.top/2019/05/17/Mac%E4%B8%8BActiveMQ%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://www.herobin.top/2019/05/17/Mac下ActiveMQ的下载与安装/</id>
    <published>2019-05-17T15:16:12.000Z</published>
    <updated>2019-05-17T15:18:49.926Z</updated>
    
    <content type="html"><![CDATA[<p>首先在activemq<a href="http://activemq.apache.org" target="_blank" rel="noopener">官网</a>下载压缩包</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-02/1.png" alt=""></p><p>解压后进入/bin/macosx目录下<br>通过<code>./activemq start</code>命令启动<br>控制台出现Starting ActiveMQ Broker…  启动成功 </p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-02/2.png" alt=""></p><p>在浏览器输入 <a href="">127.0.0.1:8161/admin/</a><br>默认的用户名和密码都是admin<br>如图启动成功</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-02/3.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先在activemq&lt;a href=&quot;http://activemq.apache.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载压缩包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent
      
    
    </summary>
    
      <category term="MQ" scheme="http://www.herobin.top/categories/MQ/"/>
    
    
      <category term="MQ" scheme="http://www.herobin.top/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>mac 打开虚拟机报错 打不开 /dev/vmmon：Broken pipe</title>
    <link href="http://www.herobin.top/2019/05/17/mac%20%E6%89%93%E5%BC%80%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%A5%E9%94%99%20%E6%89%93%E4%B8%8D%E5%BC%80%20:dev:vmmon%EF%BC%9ABroken%20pipe/"/>
    <id>http://www.herobin.top/2019/05/17/mac 打开虚拟机报错 打不开 :dev:vmmon：Broken pipe/</id>
    <published>2019-05-17T14:54:01.000Z</published>
    <updated>2019-05-17T15:06:27.981Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-01/1.png" alt=""></p><p>解决办法：<br>去系统偏好设置 ——&gt; 安全性与隐私下的通用中可以看到VMware已被阻止载入，点击允许即可。</p><p><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-01/2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhangbin1995/blog-img/master/imgs/201905/0517-01/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决办法：&lt;br&gt;去系统偏好设置 ——&amp;gt
      
    
    </summary>
    
      <category term="报错" scheme="http://www.herobin.top/categories/%E6%8A%A5%E9%94%99/"/>
    
    
      <category term="报错" scheme="http://www.herobin.top/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>推送github报错“The remote end hung up unexpectedly”解决办法</title>
    <link href="http://www.herobin.top/2019/05/17/%E6%8E%A8%E9%80%81github%E6%8A%A5%E9%94%99%E2%80%9CThe%20remote%20end%20hung%20up%20unexpectedly%E2%80%9D%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://www.herobin.top/2019/05/17/推送github报错“The remote end hung up unexpectedly”解决办法/</id>
    <published>2019-05-17T14:46:09.000Z</published>
    <updated>2019-05-17T14:50:38.348Z</updated>
    
    <content type="html"><![CDATA[<p>推送项目到github时先是卡住然后过了很久报错<code>The remote end hung up unexpectedly</code><br>原因是推送的文件太大。</p><p>解决方法：在目录的隐藏文件.git中修改config文件增加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[http]</span><br><span class="line">postBuffer = <span class="number">524288000</span></span><br></pre></td></tr></table></figure><p>这里是修改提交的缓存为500M。<br>修改之后重新推送即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推送项目到github时先是卡住然后过了很久报错&lt;code&gt;The remote end hung up unexpectedly&lt;/code&gt;&lt;br&gt;原因是推送的文件太大。&lt;/p&gt;
&lt;p&gt;解决方法：在目录的隐藏文件.git中修改config文件增加如下代码：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="报错" scheme="http://www.herobin.top/categories/%E6%8A%A5%E9%94%99/"/>
    
    
      <category term="报错" scheme="http://www.herobin.top/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>Java面试基础篇</title>
    <link href="http://www.herobin.top/2019/05/16/Java%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://www.herobin.top/2019/05/16/Java面试基础篇/</id>
    <published>2019-05-16T14:13:08.000Z</published>
    <updated>2019-05-16T14:29:27.228Z</updated>
    
    <content type="html"><![CDATA[<p>Java面试基础篇</p><table><thead><tr><th>基础总结</th><th>博客地址</th></tr></thead><tbody><tr><td>Java语言基础常识</td><td><a href="https://blog.csdn.net/qq_24095055/article/details/88531257" target="_blank" rel="noopener">点击跳转</a></td></tr><tr><td>J2EE基础知识</td><td><a href="https://blog.csdn.net/qq_24095055/article/details/88687741" target="_blank" rel="noopener">点击跳转</a></td></tr><tr><td>Java的强引用、弱引用、软引用、虚引用</td><td><a href="https://blog.csdn.net/qq_24095055/article/details/88528214" target="_blank" rel="noopener">点击跳转</a></td></tr><tr><td>Java12 新特性</td><td><a href="https://blog.csdn.net/qq_24095055/article/details/88723597" target="_blank" rel="noopener">点击跳转</a></td></tr><tr><td>Java异常详解</td><td></td></tr><tr><td>Java IO 详解</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java面试基础篇&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基础总结&lt;/th&gt;
&lt;th&gt;博客地址&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java语言基础常识&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://blog.
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="面试" scheme="http://www.herobin.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java的强引用、弱引用、软引用、虚引用</title>
    <link href="http://www.herobin.top/2019/05/15/Java%E7%9A%84%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E8%99%9A%E5%BC%95%E7%94%A8/"/>
    <id>http://www.herobin.top/2019/05/15/Java的强引用、弱引用、软引用、虚引用/</id>
    <published>2019-05-15T14:58:11.000Z</published>
    <updated>2019-05-15T15:14:25.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-强引用（StrongReference）"><a href="#1-强引用（StrongReference）" class="headerlink" title="1. 强引用（StrongReference）"></a>1. 强引用（StrongReference）</h1><p>强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收期绝不会回收它。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o=new Object();   //  强引用</span><br></pre></td></tr></table></figure></p><p>当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。如果不使用时，要通过如下方式来弱化引用，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">o = null;  // 帮助垃圾收集器回收此对象</span><br></pre></td></tr></table></figure></p><p>显式地设置o为null，或超出对象的生命周期范围，则gc认为该对象不存在引用，这时就可以回收这个对象。具体什么时候收集这要取决于gc的算法。</p><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void test()&#123;</span><br><span class="line">    Object o=new Object();</span><br><span class="line">    // 省略其他操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在一个方法的内部有一个强引用，这个引用保存在栈中，而真正的引用内容（Object）保存在堆中。当这个方法运行完成后就会退出方法栈，则引用内容的引用不存在，这个Object会被回收。</p><p>但是如果这个o是全局的变量时，就需要在不用这个对象时赋值为null，因为强引用不会被垃圾回收。</p><p>强引用在实际中有非常重要的用处，举个ArrayList的实现源代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private transient Object[] elementData;</span><br><span class="line">public void clear() &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        // Let gc do its work</span><br><span class="line">        for (int i = 0; i &lt; size; i++)</span><br><span class="line">            elementData[i] = null;</span><br><span class="line">        size = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在ArrayList类中定义了一个私有的变量elementData数组，在调用方法清空数组时可以看到为每个数组内容赋值为null。不同于elementData=null，强引用仍然存在，避免在后续调用 add()等方法添加元素时进行重新的内存分配。使用如clear()方法中释放内存的方法对数组中存放的引用类型特别适用，这样就可以及时释放内存。 </p><h1 id="2、软引用（SoftReference）"><a href="#2、软引用（SoftReference）" class="headerlink" title="2、软引用（SoftReference）"></a>2、软引用（SoftReference）</h1><p>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str=new String(&quot;abc&quot;);                                     // 强引用</span><br><span class="line">SoftReference&lt;String&gt; softRef=new SoftReference&lt;String&gt;(str);     // 软引用</span><br></pre></td></tr></table></figure><p>当内存不足时，等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If(JVM.内存不足()) &#123;</span><br><span class="line">   str = null;  // 转换为软引用</span><br><span class="line">   System.gc(); // 垃圾回收器进行回收</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 软引用在实际中有重要的应用，例如浏览器的后退按钮。按后退时，这个后退时显示的网页内容是重新进行请求还是从缓存中取出呢？这就要看具体的实现策略了。</p><p>（1）如果一个网页在浏览结束时就进行内容的回收，则按后退查看前面浏览过的页面时，需要重新构建</p><p>（2）如果将浏览过的网页存储到内存中会造成内存的大量浪费，甚至会造成内存溢出</p><p>这时候就可以使用软引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Browser prev = new Browser();               // 获取页面进行浏览</span><br><span class="line">SoftReference sr = new SoftReference(prev); // 浏览完毕后置为软引用        </span><br><span class="line">if(sr.get()!=null)&#123; </span><br><span class="line">    rev = (Browser) sr.get();           // 还没有被回收器回收，直接获取</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    prev = new Browser();               // 由于内存吃紧，所以对软引用的对象回收了</span><br><span class="line">    sr = new SoftReference(prev);       // 重新构建</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就很好的解决了实际的问题。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><h1 id="3、弱引用（WeakReference）"><a href="#3、弱引用（WeakReference）" class="headerlink" title="3、弱引用（WeakReference）"></a>3、弱引用（WeakReference）</h1><p> 弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str=new String(&quot;abc&quot;);    </span><br><span class="line">WeakReference&lt;String&gt; abcWeakRef = new WeakReference&lt;String&gt;(str);</span><br><span class="line">str=null;</span><br></pre></td></tr></table></figure><p>当垃圾回收器进行扫描回收时等价于：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str = null;</span><br><span class="line">System.gc();</span><br></pre></td></tr></table></figure></p><p>如果这个对象是偶尔的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象。   </p><p>下面的代码会让str再次变为一个强引用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String  abc = abcWeakRef.get();</span><br></pre></td></tr></table></figure></p><p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><p>当你想引用一个对象，但是这个对象有自己的生命周期，你不想介入这个对象的生命周期，这时候你就是用弱引用。</p><p>这个引用不会在对象的垃圾回收判断中产生任何附加的影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">public class ReferenceTest &#123;</span><br><span class="line"></span><br><span class="line">    private static ReferenceQueue&lt;VeryBig&gt; rq = new ReferenceQueue&lt;VeryBig&gt;();</span><br><span class="line"></span><br><span class="line">    public static void checkQueue() &#123;</span><br><span class="line">        Reference&lt;? extends VeryBig&gt; ref = null;</span><br><span class="line">        while ((ref = rq.poll()) != null) &#123;</span><br><span class="line">            if (ref != null) &#123;</span><br><span class="line">                System.out.println(&quot;In queue: &quot;    + ((VeryBigWeakReference) (ref)).id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) &#123;</span><br><span class="line">        int size = 3;</span><br><span class="line">        LinkedList&lt;WeakReference&lt;VeryBig&gt;&gt; weakList = new LinkedList&lt;WeakReference&lt;VeryBig&gt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">            weakList.add(new VeryBigWeakReference(new VeryBig(&quot;Weak &quot; + i), rq));</span><br><span class="line">            System.out.println(&quot;Just created weak: &quot; + weakList.getLast());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.gc(); </span><br><span class="line">        try &#123; // 下面休息几分钟，让上面的垃圾回收线程运行完成</span><br><span class="line">            Thread.currentThread().sleep(6000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        checkQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VeryBig &#123;</span><br><span class="line">    public String id;</span><br><span class="line">    // 占用空间,让线程进行回收</span><br><span class="line">    byte[] b = new byte[2 * 1024];</span><br><span class="line"></span><br><span class="line">    public VeryBig(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void finalize() &#123;</span><br><span class="line">        System.out.println(&quot;Finalizing VeryBig &quot; + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VeryBigWeakReference extends WeakReference&lt;VeryBig&gt; &#123;</span><br><span class="line">    public String id;</span><br><span class="line"></span><br><span class="line">    public VeryBigWeakReference(VeryBig big, ReferenceQueue&lt;VeryBig&gt; rq) &#123;</span><br><span class="line">        super(big, rq);</span><br><span class="line">        this.id = big.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void finalize() &#123;</span><br><span class="line">        System.out.println(&quot;Finalizing VeryBigWeakReference &quot; + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Just created weak: com.javabase.reference.VeryBigWeakReference@1641c0</span><br><span class="line">Just created weak: com.javabase.reference.VeryBigWeakReference@136ab79</span><br><span class="line">Just created weak: com.javabase.reference.VeryBigWeakReference@33c1aa</span><br><span class="line">Finalizing VeryBig Weak 2</span><br><span class="line">Finalizing VeryBig Weak 1</span><br><span class="line">Finalizing VeryBig Weak 0</span><br><span class="line">In queue: Weak 1</span><br><span class="line">In queue: Weak 2</span><br><span class="line">In queue: Weak 0</span><br></pre></td></tr></table></figure></p><h1 id="4、虚引用（PhantomReference）"><a href="#4、虚引用（PhantomReference）" class="headerlink" title="4、虚引用（PhantomReference）"></a>4、虚引用（PhantomReference）</h1><p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</p><p>虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。</p><h1 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h1><p>java4种引用的级别由高到低依次为：<br><strong><font color="red">强引用 &gt; 软引用 &gt; 弱引用 &gt; 虚引用</font></strong><br>通过图来看一下他们之间在垃圾回收时的区别：<br><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/uploads/190515java1/1.png" alt="在这里插入图片描述"><br>当垃圾回收器回收时，某些对象会被回收，某些不会被回收。垃圾回收器会从根对象Object来标记存活的对象，然后将某些不可达的对象和一些引用的对象进行回收，如果对这方面不是很了解，可以参考如下的文章：</p><p>通过表格来说明一下，如下：<br><img src="https://raw.githubusercontent.com/zhangbin1995/blog-img/master/uploads/190515java1/2.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-强引用（StrongReference）&quot;&gt;&lt;a href=&quot;#1-强引用（StrongReference）&quot; class=&quot;headerlink&quot; title=&quot;1. 强引用（StrongReference）&quot;&gt;&lt;/a&gt;1. 强引用（StrongRefere
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Guns集成dubbo分布式开发环境搭建</title>
    <link href="http://www.herobin.top/2019/03/04/Guns%E9%9B%86%E6%88%90dubbo%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.herobin.top/2019/03/04/Guns集成dubbo分布式开发环境搭建/</id>
    <published>2019-03-04T05:20:37.000Z</published>
    <updated>2019-05-15T14:53:50.410Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><p>首先项目是基于开源软件Guns为基础的。</p><p>码云地址：<a href="https://gitee.com/stylefeng/guns" target="_blank" rel="noopener">https://gitee.com/stylefeng/guns</a></p><p>官网介绍如下：Guns基于Spring Boot 2，致力于做更简洁的后台管理系统，完美整合springmvc + shiro + mybatis-plus + beetl，Guns项目代码简洁，注释丰富，上手容易，同时Guns包含许多基础模块(用户管理，角色管理，部门管理，字典管理等10个模块)，可以直接作为一个后台管理系统的脚手架！同时提供spring cloud版本！</p><p>这里我们使用的不是最新版本，而是比较方便集成dubbo进行分布式开发的一个版本，资料和本博客的项目源码在文章末尾的github中。</p><p>将压缩包在我们理想的目录下解压出来。</p><p><img src="/uploads/190304java1/1.png" alt=""></p><p>首先我们使用guns-rest/db/guns-rest.sql语句创建guns-rest数据库。</p><p><img src="/uploads/190304java1/2.png" alt=""></p><p>去yml中将数据库信息改为本机信息，启动GunsRestApplication，发现报错缺少log4j，在pom中将其引入。</p><p><img src="/uploads/190304java1/3.png" alt=""></p><p>题外话：我们使用开源软件的时候，如果一个版本使用的很好就不要老换，容易出现问题，如维护的人不多导致提交不规范等，可能会使软件变得不再好用。</p><p>上面的问题我们在rest的pom中加上依赖(去maven repository中找就好)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>再次运行发现还有报错MybatisPlusException，这里是因为数据库信息中使用了一个zeroDateTimeBehavior，这里我们将它换成serverTimezone就好了。</p><p><img src="/uploads/190304java1/4.png" alt=""></p><p>再次启动，运行成功。</p><p>这时我们访问rest提供的验证接口：<a href="http://localhost/auth?userName=admin&amp;password=admin" target="_blank" rel="noopener">http://localhost/auth?userName=admin&amp;password=admin</a> </p><p><img src="/uploads/190304java1/5.png" alt=""></p><p>如图，成功返回了token和随机密钥，也说明了我们的guns环境搭建成功了。</p><p>这里我们添加模块可以直接在项目上new module，也可以直接拷贝guns-rest然后改名即可，这里推荐第二种拷贝的方式。</p><p>我们通过copy rest模块新建一个模块guns-gateway，记住要将他添加到总工程的pom中。</p><p><img src="/uploads/190304java1/6.png" alt=""></p><p>在gateway的pom中将artifactId改为正确的名称。</p><p><img src="/uploads/190304java1/7.png" alt=""></p><p>这里会发现我们的gateway模块后面跟着一个guns-rest(1)，这是因为我们从rest拷贝过来的名字默认是rest(1)，去项目的project structure中修改掉即可。</p><p><img src="/uploads/190304java1/8.png" alt=""></p><p>启动一下gateway，启动成功了，再次访问auth接口，还是成功的。</p><p>接下来我们在Guns中集成dubbo。</p><p>首先将dubbo和zookeeper的依赖包拷贝进来。</p><p><img src="/uploads/190304java1/9.png" alt=""></p><p>在yml中配置dubbo信息：</p><p><img src="/uploads/190304java1/10.png" alt=""></p><p>启动类上开启dubbo注解：</p><p><img src="/uploads/190304java1/11.png" alt=""></p><p>然后我们编写一个模拟验证登录状态的服务接口以及他的实现类并通过@Service将它暴露给dubbo。</p><p><img src="/uploads/190304java1/12.png" alt=""></p><p>这样dubbo的一个基本环境就已经完成了。</p><p>将zookeeper启动，再启动我们的项目，会在zookeeper的日志中发现注册了新的服务，至此，集成dubbo成功。</p><p>再次执行auth接口，一切正常。</p><p>这里我们可以发现有一个问题，我们的模块中的接口和实现类都是一对一的，可是每个模块又要有其他模块的接口，这样接口的冗余会非常高，这样我们可以再单独建一个子工程，他的作用就是承载我们的业务接口以及各个模块中需要的实体类。<br>这样接口我们只写一遍，所有的工程就都可以共享了。</p><p>我们拷贝guns-core新命名为guns-api，将用不到的target删掉。<br>在父项目的pom中将它添加进去，再到project structure中将它改好名字，还要改好它自身的pom里的配置。<br>将原来的模块都删掉。</p><p><img src="/uploads/190304java1/13.png" alt=""></p><p>新建我们自己的模块，包名也可以改为我们想要的。然后就可以将我们在gateway中编写的UserAPI接口拷贝过来。</p><p><img src="/uploads/190304java1/13.1.png" alt=""></p><p>然后在gateway中继承一下api模块，就可以直接使用里面的接口了。</p><p><img src="/uploads/190304java1/14.png" alt=""></p><p>这样就可以将我们gateway里面的UserAPI接口删掉了，会自动继承我们写在api里的UserAPI。<br>注意要将我们的api模块放到maven库中，才能读取的到。</p><p><img src="/uploads/190304java1/15.png" alt=""></p><p>不要忘了在api的pom中将名字由core改为api。</p><p><img src="/uploads/190304java1/16.png" alt=""></p><p>再点击maven中api模块的Lifecycle中的install就可以安装api到maven中了，这样gateway里就能读到api里的接口了。</p><p><img src="/uploads/190304java1/17.png" alt=""></p><p>不要忘了去父节点中引入api包。</p><p><img src="/uploads/190304java1/18.png" alt=""></p><p>这时我们可以看到gateway中UserImpl引用的UserAPI接口就是来自api模块中的了。</p><p><img src="/uploads/190304java1/19.png" alt=""></p><p>以后将所有需要暴露的接口都放在api中就好了。</p><p>这样开发的架子就已经搭建好了。</p><p>项目github地址：<a href="https://github.com/zhangbin1995/guns.git" target="_blank" rel="noopener">https://github.com/zhangbin1995/guns.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先项目是基于开源软件Guns为基础的。&lt;/p&gt;
&lt;p&gt;码云地址：&lt;a href=&quot;https://gitee.com/styl
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
      <category term="dubbo" scheme="http://www.herobin.top/tags/dubbo/"/>
    
      <category term="Guns" scheme="http://www.herobin.top/tags/Guns/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成zookeeper注册中心</title>
    <link href="http://www.herobin.top/2019/03/03/springboot%E9%9B%86%E6%88%90zookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://www.herobin.top/2019/03/03/springboot集成zookeeper注册中心/</id>
    <published>2019-03-03T08:09:55.000Z</published>
    <updated>2019-05-15T14:50:31.288Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><p>前面的博客我们配置了springboot集成dubbo开发环境搭建，这里我们在之前的基础上集成zookeeper注册中心。</p><p>首先不要忘记在consumer和provider的pom中引入zookeeper的依赖</p><p><img src="/uploads/190303java4/1.png" alt=""></p><p>修改配置文件，由无注册中心的改为zookeeper注册中心的</p><p><img src="/uploads/190303java4/2.png" alt=""></p><p>这时启动我们项目就可以将这个服务注册到zookeeper上了，可以从zookeeper日志上看出。</p><p>去consumer消费者中填写注册中心地址</p><p><img src="/uploads/190303java4/3.png" alt=""></p><p>修改消费者接口将原来的直连提供者方式改为zookeeper配置。</p><p><img src="/uploads/190303java4/4.png" alt=""></p><p>启动consumer模块，得到目标输出，springboot配置dubbo成功。</p><p><img src="/uploads/190303java4/5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前面的博客我们配置了springboot集成dubbo开发环境搭建，这里我们在之前的基础上集成zookeeper注册中心。&lt;/p
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
      <category term="dubbo" scheme="http://www.herobin.top/tags/dubbo/"/>
    
      <category term="zookeeper" scheme="http://www.herobin.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>spring集成zookeeper注册中心</title>
    <link href="http://www.herobin.top/2019/03/03/spring%E9%9B%86%E6%88%90zookeeper%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
    <id>http://www.herobin.top/2019/03/03/spring集成zookeeper注册中心/</id>
    <published>2019-03-03T07:58:34.000Z</published>
    <updated>2019-03-03T08:00:10.082Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><p>在spring+dubbo开发环境搭建好，及下载安装好zookeeper之后（相关步骤在前面的博客中），现在我们来配置spring集成zookeeper注册中心。<br>在provider的<code>application.xml</code>中配置提供者到注册中心zookeeper中，这里zookeeper为本机的zookeeper，zookeeper的默认端口号为<code>2181</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dubbo:registry address=&quot;zookeeper://localhost:2181&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/uploads/190303java3/1.png" alt=""></p><p>记得将之前没有配置注册中心的写在<code>dubbo:service</code>中的<code>register=&quot;N/A&quot;</code>删掉。</p><p>使用命令行 <code>zkServer.sh start-foreground</code> 前台启动zookeeper后，再运行provider程序，可以看到日志输入，即我们服务者接口注册成功了。</p><p><img src="/uploads/190303java3/2.png" alt=""></p><p>接下来我们去consumer服务消费者这边配置，同样是在<code>application.xml</code>中配置注册中心</p><p><img src="/uploads/190303java3/3.png" alt=""></p><p>启动consumer服务，输入得到输出，配置成功。</p><p><img src="/uploads/190303java3/4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在spring+dubbo开发环境搭建好，及下载安装好zookeeper之后（相关步骤在前面的博客中），现在我们来配置sprin
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="dubbo" scheme="http://www.herobin.top/tags/dubbo/"/>
    
      <category term="spring" scheme="http://www.herobin.top/tags/spring/"/>
    
      <category term="zookeeper" scheme="http://www.herobin.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper下载与安装</title>
    <link href="http://www.herobin.top/2019/03/03/zookeeper%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://www.herobin.top/2019/03/03/zookeeper下载与安装/</id>
    <published>2019-03-03T06:47:13.000Z</published>
    <updated>2019-03-03T07:17:35.342Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><p>在zookeeper官网：<a href="http://zookeeper.apache.org" target="_blank" rel="noopener">zookeeper.apache.org</a> 中点击download进入下载页面</p><p><img src="/uploads/190303java2/1.png" alt=""></p><p>点击进入下载，这里我们下载的版本是3.4.10</p><p>下载完成后，拷贝到我们想要放到的路径进行解压，注意路径不要有中文。</p><p>注意zookeeper的安装是要建立在jdk的安装上的，不过安装zookeeper的应该也都有jdk了。。。</p><p>首先我们要去conf文件夹中修改一个配置文件<code>zoo_sample.cfg</code>改名为<code>zoo.cfg</code></p><p>去bin文件夹下可以看到我们启动执行文件<code>zkServer.sh</code>(windows则为<code>zkServer.cmd</code>)<br>执行该文件<code>./zkServer.sh start</code>，如下图执行成功。</p><p><img src="/uploads/190303java2/2.png" alt=""></p><p>ZooKeeper下载与安装完毕。</p><p>另外说明一下，这里的<code>./zkServer.sh start</code>是后台启动，若要查看日志可用前台启动<br><code>zkServer.sh start-foreground</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在zookeeper官网：&lt;a href=&quot;http://zookeeper.apache.org&quot; target=&quot;_blan
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="zookeeper" scheme="http://www.herobin.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成dubbo环境搭建</title>
    <link href="http://www.herobin.top/2019/03/03/springboot%E9%9B%86%E6%88%90dubbo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.herobin.top/2019/03/03/springboot集成dubbo环境搭建/</id>
    <published>2019-03-03T04:31:12.000Z</published>
    <updated>2019-03-03T04:34:03.386Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><p>新建project</p><p><img src="/uploads/190303java1/1.png" alt=""></p><p>next取好项目名，一路next即可。<br>新建两个module，provider和consumer同样是springboot项目创建步骤同上。<br>将两个模块分别启动，均启动成功，说明springboot没有问题，接下来集成dubbo。<br>SpringBoot版本Dubbo集成中文地址：<a href="https://github.com/alibaba/dubbo-spring-boot-starter/blob/master/README_zh.md" target="_blank" rel="noopener">https://github.com/alibaba/dubbo-spring-boot-starter/blob/master/README_zh.md</a></p><p>将dubbo的依赖引入到两个模块的pom中</p><p><img src="/uploads/190303java1/2.png" alt=""></p><p>在application.properties中添加dubbo的相关配置信息</p><p><img src="/uploads/190303java1/3.png" alt=""></p><p>接下来在ProviderApplication的上添加@EnableDubboConfiguration，表示要开启dubbo功能. (dubbo provider服务可以使用或者不使用web容器)</p><p><img src="/uploads/190303java1/4.png" alt=""></p><p>编写服务提供者的接口和实现类<br>编写你的dubbo服务，只需要添加要发布的服务实现上添加@Service（import com.alibaba.dubbo.config.annotation.Service）注解，其中interfaceClass是要发布服务的接口</p><p><img src="/uploads/190303java1/5.png" alt=""></p><p>启动服务者的Spring Boot应用，观察控制台，可以看到dubbo启动相关信息.<br>至此，provider的dubbo配置成功。</p><p>接下来配置consumer的dubbo配置<br>添加依赖</p><p><img src="/uploads/190303java1/6.png" alt=""></p><p>在application.properties中添加dubbo的相关配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=dubbo-spring-boot-starter</span><br></pre></td></tr></table></figure></p><p>这里这个name是可以自己命名的。</p><p>开启ConsumnerApplication启动类的<code>@EnableDubboConfiguration</code>注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableDubboConfiguration</span><br></pre></td></tr></table></figure></p><p>在consumer中编写服务实用类，记得要将provider中的接口DemeService拷贝过来</p><p><img src="/uploads/190303java1/7.png" alt=""></p><p>编写ConsumerApplication类并执行</p><p><img src="/uploads/190303java1/8.png" alt=""></p><p>获得目标输出，springboot集成dubbo环境搭建成功。</p><p>代码github地址：<a href="https://github.com/zhangbin1995/springbootdubbo.git" target="_blank" rel="noopener">https://github.com/zhangbin1995/springbootdubbo.git</a></p><p>当然上面只是简单的springboot+dubbo的环境集成，这样是有瑕疵的。</p><p>我们的上面示例里消费者是直连提供者的，这种方式只可以在测试环境中使用，因为直连提供者限制了分布式的易扩展性，如果提供者部署在多节点，而我们在消费者中是直连写死的状态，那就只会访问一个节点，也违背了我们的分布式的初衷。</p><p>所以通常我们的消费者和提供者是要通过注册中心来注册调用的关于注册中心，后面会继续介绍，本篇博文介绍的springboot+dubbo的集成到此结束。</p><p><img src="/uploads/190303java1/9.png" alt=""></p><p><img src="/uploads/190303java1/10.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新建project&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/190303java1/1.png&quot; alt=&quot;&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="springboot" scheme="http://www.herobin.top/tags/springboot/"/>
    
      <category term="dubbo" scheme="http://www.herobin.top/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>spring集成dubbo开发环境搭建</title>
    <link href="http://www.herobin.top/2019/03/02/spring%E9%9B%86%E6%88%90dubbo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.herobin.top/2019/03/02/spring集成dubbo开发环境搭建/</id>
    <published>2019-03-02T08:21:15.000Z</published>
    <updated>2019-03-02T08:25:16.630Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><p>首先新建maven项目选择quickstart为项目原型。</p><p><img src="/uploads/190302java1/1.png" alt=""></p><p>点击项目添加两个module分别命名provider和consumer，原型同样选择quickstart分别作为服务提供者和消费者。（注意新建后暂时没有src文件夹，要等maven配置全部加载完才有，如果过慢，记得检查是否配置好idea的maven配置是否改为aliyun仓库）。<br>这里我们用不到测试用例，可以将test文件删掉。</p><p>添加放置资源文件的resources文件夹，并在project structrue中添加进Resources中。</p><p><img src="/uploads/190302java1/2.png" alt=""></p><p>将需要的jar包依赖拷贝到父工程的pom中，这样各个模块就都可以使用了，注意在实际开发中，应该是各个模块分别引入该模块要用到的jar包，再在各模块的resources中新建applicationContext.xml即spring配置文件。</p><p><img src="/uploads/190302java1/3.png" alt=""></p><p>这样简单的spring环境就搭好了，接下来我们要集成dubbo环境。<br>可以参考dubbo用户手册：<a href="https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html" target="_blank" rel="noopener">https://dubbo.gitbooks.io/dubbo-user-book/content/quick-start.html</a></p><p><img src="/uploads/190302java1/4.png" alt=""></p><p>在provider中新建一个服务接口DemoService和它的实现类。<br>用Spring配置声明暴露服务。</p><p><img src="/uploads/190302java1/5.png" alt=""></p><p>编写服务启动类App.java</p><p><img src="/uploads/190302java1/6.png" alt=""></p><p>至此，我们的provider模块就写好了，将它启动起来。<br>编辑consumer里的applicationContext.xml文件通过spring配置引用远程服务。</p><p><img src="/uploads/190302java1/7.png" alt=""></p><p>这样就已经可以访问到provider接口提供的服务了。<br>编写App类加载consumer的spring配置文件并进行测试。</p><p><img src="/uploads/190302java1/8.png" alt=""></p><p>启动消费者服务，输入zhangbin，得到服务提供者接口的返回值，由此，spring与dubbo集成环境配置成功。</p><p>项目代码已放到github：<a href="https://github.com/zhangbin1995/springdubbo.git" target="_blank" rel="noopener">https://github.com/zhangbin1995/springdubbo.git</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先新建maven项目选择quickstart为项目原型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/190302ja
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="dubbo" scheme="http://www.herobin.top/tags/dubbo/"/>
    
      <category term="spring" scheme="http://www.herobin.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>第一个docker化的java应用</title>
    <link href="http://www.herobin.top/2019/02/23/%E7%AC%AC%E4%B8%80%E4%B8%AAdocker%E5%8C%96%E7%9A%84java%E5%BA%94%E7%94%A8/"/>
    <id>http://www.herobin.top/2019/02/23/第一个docker化的java应用/</id>
    <published>2019-02-23T02:30:24.000Z</published>
    <updated>2019-03-02T08:44:07.148Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><h1 id="制作镜像Dockerfile"><a href="#制作镜像Dockerfile" class="headerlink" title="制作镜像Dockerfile"></a>制作镜像Dockerfile</h1><p>这里制作镜像主要分为三步</p><blockquote><p>Dockerfile<br>docker build<br>Jpress：<a href="http://jpress.io/" target="_blank" rel="noopener">http://jpress.io/</a> (开源java web应用 博客平台)</p></blockquote><h2 id="下载tomcat镜像"><a href="#下载tomcat镜像" class="headerlink" title="下载tomcat镜像"></a>下载tomcat镜像</h2><p>首先我们的镜像是要依托tomcat运行的，所以先到网易云的镜像中心下载tomcat的镜像<br><code>docker pull hub.c.163.com/library/tomcat:latest</code><br>在tomcat镜像的介绍中可以看到使用方法，如找到启动方法，查看tomcat路径等。</p><p><img src="/uploads/190222java3/1.png" alt=""></p><h2 id="新建编辑Dockerfile"><a href="#新建编辑Dockerfile" class="headerlink" title="新建编辑Dockerfile"></a>新建编辑Dockerfile</h2><p><code>vi Dockerfile</code> </p><p><img src="/uploads/190222java3/2.png" alt=""></p><h2 id="通过docker-build生成镜像"><a href="#通过docker-build生成镜像" class="headerlink" title="通过docker build生成镜像"></a>通过docker build生成镜像</h2><p><img src="/uploads/190222java3/3.png" alt=""></p><p>这里<code>-t jpress:latest</code>是指定了镜像名字和标签，注意后面有个 . 用于查找当前目录下的构建文件，即Dockerfile<br>用<code>docker images</code>查看，发现有了jpress。</p><p><img src="/uploads/190222java3/4.png" alt=""></p><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>在tomcat的镜像中心我们可以看到运行指令，执行：<br><code>docker run -d -p 8888:8080 jpress</code><br>启动镜像，发现可以访问我们的jpress程序了。</p><p><img src="/uploads/190222java3/5.png" alt=""></p><p>这里要正常使用jpress需要配置好数据库信息。<br>我们也可以在docker中安装运行一个mysql数据库。<br>去镜像中心下载mysql镜像：<br><code>docker pull hub.c.163.com/library/mysql:latest</code><br>同样可以在介绍中看到使用方式。</p><p><img src="/uploads/190222java3/6.png" alt=""></p><p>下载完后新建一个名为jpress的数据库并将mysql运行起来：<br> <code>docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_DATABASE=jpress hub.c.163.com/library/mysql:latest</code><br>回到网站将信息配置好。</p><p><img src="/uploads/190222java3/7.png" alt=""></p><p>注意这里点击下一步的时候失败了，使用docker ps命令发现mysql镜像并没有执行，再次执行run发现启动报错。</p><p><img src="/uploads/190222java3/8.png" alt=""></p><p>因为本机有mysql服务正在使用，3306端口是占用状态的，将3306改为3307即可。<br>再下一页配置好网站信息，jpress网站即搭建成功可以正常使用了。</p><p><img src="/uploads/190222java3/9.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;制作镜像Dockerfile&quot;&gt;&lt;a href=&quot;#制作镜像Dockerfile&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="服务器" scheme="http://www.herobin.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>docker运行nginx镜像</title>
    <link href="http://www.herobin.top/2019/02/22/docker%E8%BF%90%E8%A1%8Cnginx%E9%95%9C%E5%83%8F/"/>
    <id>http://www.herobin.top/2019/02/22/docker运行nginx镜像/</id>
    <published>2019-02-22T08:09:17.000Z</published>
    <updated>2019-03-02T08:38:45.258Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="mac下安装docker">TOC</a></p><p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><h1 id="下载并运行nginx镜像"><a href="#下载并运行nginx镜像" class="headerlink" title="下载并运行nginx镜像"></a>下载并运行nginx镜像</h1><p>在网易云的镜像中心找到nginx的镜像<br><a href="https://c.163yun.com/hub#/m/home/" target="_blank" rel="noopener">https://c.163yun.com/hub#/m/home/</a></p><p>复制nginx的下载地址：hub.c.163.com/library/nginx:latest<br>使用<code>docker pull hub.c.163.com/library/nginx:latest</code><br>下载nginx镜像到本地</p><p>这时再使用<code>docker images</code>可以查看到本地已有的nignx镜像</p><p>使用<code>docker run hub.c.163.com/library/nginx</code><br>发现没有任何输出，新建窗口输入<code>docker ps</code>可以查看本机当前运行的所有容器。</p><p><img src="/uploads/190222java2/1.png" alt=""></p><p>这时只要通过<code>ctrl+c</code>既可以停止程序，所以我们通常推荐在后台运行镜像 通过加 <code>-d</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d hub.c.163.com/library/nginx</span><br></pre></td></tr></table></figure></p><p>运行后可以通过docker exec命令进入指定镜像：</p><p><img src="/uploads/190222java2/3.png" alt=""></p><p>可以看到</p><blockquote><ol><li>docker run nginx镜像成功后返回一串此镜像运行的唯一标识id。</li><li>通过docker exec –help查看 docker exec命令帮助。</li><li>通过docker exec -it 603 bash来进入已运行的nginx镜像  这里只输入了604因为已经可以唯一标识确定，若不能再多输。</li><li>可通过exit命令退出镜像。</li><li>可以使用docker stop 603命令来结束nginx镜像的运行。</li></ol></blockquote><h1 id="网络访问nginx"><a href="#网络访问nginx" class="headerlink" title="网络访问nginx"></a>网络访问nginx</h1><p>运行了docker中的nginx后要怎样才能在网络（浏览器）中访问到nginx呢？</p><h2 id="docker网络类型"><a href="#docker网络类型" class="headerlink" title="docker网络类型"></a>docker网络类型</h2><blockquote><ul><li><ol><li>bridge模式（桥接，默认类型，实现网络独立性）：docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上。</li></ol></li><li><ol start="2"><li>host模式：容器不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</li></ol></li><li><ol start="3"><li>none模式：Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。docker将不会和外界的任何网络进行通讯。</li></ol></li><li><ol start="4"><li>container模式：新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。</li></ol></li></ul></blockquote><h2 id="进行访问"><a href="#进行访问" class="headerlink" title="进行访问"></a>进行访问</h2><blockquote><p>docker启动 -p 的使用： docker run -d -p 主机端口:容器端口 容器的名称<br>docker启动  -P 的使用（所有的监听端口都会和主机建立一个映射）： docker run -d -P 容器名称<br>停止docker：docker stop 容器Id</p></blockquote><p><strong>-p 的使用</strong> (注意这里是小写的p，下面是大写的P)</p><p><img src="/uploads/190222java2/4.png" alt=""></p><p><img src="/uploads/190222java2/5.png" alt=""></p><p><strong>-P 的使用</strong></p><p><img src="/uploads/190222java2/6.png" alt=""></p><p><img src="/uploads/190222java2/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;mac下安装docker&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;下载并运行nginx镜像&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="服务器" scheme="http://www.herobin.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="docker" scheme="http://www.herobin.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>centos下安装docker</title>
    <link href="http://www.herobin.top/2019/02/22/centos%E4%B8%8B%E5%AE%89%E8%A3%85docker/"/>
    <id>http://www.herobin.top/2019/02/22/centos下安装docker/</id>
    <published>2019-02-22T06:08:05.000Z</published>
    <updated>2019-02-22T06:09:06.810Z</updated>
    
    <content type="html"><![CDATA[<p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><h2 id="1-检查内核版本"><a href="#1-检查内核版本" class="headerlink" title="1. 检查内核版本"></a>1. 检查内核版本</h2><p><code>uname -r</code><br>返回的值大于3.10即可。</p><h2 id="2-使用sudo或root权限的用户登录终端。"><a href="#2-使用sudo或root权限的用户登录终端。" class="headerlink" title="2. 使用sudo或root权限的用户登录终端。"></a>2. 使用sudo或root权限的用户登录终端。</h2><h2 id="3-卸载旧版本（如果安装过旧版本的话）"><a href="#3-卸载旧版本（如果安装过旧版本的话）" class="headerlink" title="3. 卸载旧版本（如果安装过旧版本的话）"></a>3. 卸载旧版本（如果安装过旧版本的话）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove docker \</span><br><span class="line">docker-common \</span><br><span class="line">docker-selinux \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure><h2 id="4-安装需要的软件包"><a href="#4-安装需要的软件包" class="headerlink" title="4. 安装需要的软件包"></a>4. 安装需要的软件包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#yum-util提供yum-config-manager功能</span><br><span class="line">#另外两个是devicemapper驱动依赖的</span><br><span class="line">$ yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><h2 id="5-设置yum源"><a href="#5-设置yum源" class="headerlink" title="5. 设置yum源"></a>5. 设置yum源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="6-安装docker"><a href="#6-安装docker" class="headerlink" title="6. 安装docker"></a>6. 安装docker</h2><h3 id="6-1-安装最新版本"><a href="#6-1-安装最新版本" class="headerlink" title="6.1. 安装最新版本"></a>6.1. 安装最新版本</h3><p><code>yum install -y docker-ce</code></p><h3 id="6-2-安装指定版本"><a href="#6-2-安装指定版本" class="headerlink" title="6.2. 安装指定版本"></a>6.2. 安装指定版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#查询版本列表</span><br><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">已安装的软件包</span><br><span class="line">可安装的软件包</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * extras: mirrors.163.com</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="line">...</span><br><span class="line">#指定版本安装(这里的例子是安装上面列表中的第二个)</span><br><span class="line">$ yum install -y docker-ce-17.09.0.ce</span><br></pre></td></tr></table></figure><h2 id="7-启动docker"><a href="#7-启动docker" class="headerlink" title="7. 启动docker"></a>7. 启动docker</h2><p><code>systemctl start docker.service</code></p><h2 id="8-验证安装是否成功（有client和service两部分表示docker安装启动都成功了）"><a href="#8-验证安装是否成功（有client和service两部分表示docker安装启动都成功了）" class="headerlink" title="8.验证安装是否成功（有client和service两部分表示docker安装启动都成功了）"></a>8.验证安装是否成功（有client和service两部分表示docker安装启动都成功了）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.09.0-ce</span><br><span class="line"> API version:  1.32</span><br><span class="line"> Go version:   go1.8.3</span><br><span class="line"> Git commit:   afdb6d4</span><br><span class="line"> Built:        Tue Sep 26 22:41:23 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.09.0-ce</span><br><span class="line"> API version:  1.32 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.8.3</span><br><span class="line"> Git commit:   afdb6d4</span><br><span class="line"> Built:        Tue Sep 26 22:42:49 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: false</span><br></pre></td></tr></table></figure><p>原文链接：<br><a href="https://www.imooc.com/article/16448" target="_blank" rel="noopener">https://www.imooc.com/article/16448</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-检查内核版本&quot;&gt;&lt;a href=&quot;#1-检查内核版本&quot; class=&quot;headerlink&quot; title=&quot;1. 
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="服务器" scheme="http://www.herobin.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>mac下安装docker</title>
    <link href="http://www.herobin.top/2019/02/22/mac%E4%B8%8B%E5%AE%89%E8%A3%85docker/"/>
    <id>http://www.herobin.top/2019/02/22/mac下安装docker/</id>
    <published>2019-02-22T05:50:12.000Z</published>
    <updated>2019-03-02T08:27:39.152Z</updated>
    
    <content type="html"><![CDATA[<p>@<a href="mac下安装docker">TOC</a></p><p>更多文章欢迎访问个人博客 <a href="http://www.herobin.top">www.herobin.top</a></p><h1 id="mac下安装docker"><a href="#mac下安装docker" class="headerlink" title="mac下安装docker"></a>mac下安装docker</h1><h2 id="下载并安装docker"><a href="#下载并安装docker" class="headerlink" title="下载并安装docker"></a>下载并安装docker</h2><p>mac版的docker可以直接去docker官网下载桌面版，傻瓜式安装后运行docker，会发现在桌面的右上角出现了docker的图标</p><p><img src="/uploads/190222java1/1.png" alt=""></p><h2 id="验证docker"><a href="#验证docker" class="headerlink" title="验证docker"></a>验证docker</h2><p>打开终端输入命令：docker version</p><p><img src="/uploads/190222java1/2.png" alt=""></p><p>正常出现版本信息即安装成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;@&lt;a href=&quot;mac下安装docker&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;更多文章欢迎访问个人博客 &lt;a href=&quot;http://www.herobin.top&quot;&gt;www.herobin.top&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;mac下安装docker&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="java" scheme="http://www.herobin.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.herobin.top/tags/java/"/>
    
      <category term="docker" scheme="http://www.herobin.top/tags/docker/"/>
    
  </entry>
  
</feed>
